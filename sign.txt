// import React, { useState, useContext } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";
// import { LiaEyeSolid, LiaEyeSlashSolid } from "react-icons/lia";
// import { MenuContext } from "../../context/MenuContext";

// function SignupLogin({ onClose }) {
//   const navigate = useNavigate();
//   const { handleUserLogin, getUserProfile } = useContext(MenuContext);
  
//   const [url] = useState("http://food-project-api.onrender.com");
//   // const [url] = useState("https://food-project-api.onrender.com");
  
//   const [signupData, setSignupData] = useState({
//     firstName: "",
//     lastName: "",
//     email: "",
//     password: "",
//     confirmPassword: "",
//     phone: "",
//     street: "",
//     city: "",
//     country: "",
//   });

//   const [loginData, setLoginData] = useState({
//     email: "",
//     password: "",
//   });

//   const [showLoginForm, setShowLoginForm] = useState(false);
//   const [showSignupPassword, setShowSignupPassword] = useState(false);
//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);
//   const [showLoginPassword, setShowLoginPassword] = useState(false);
//   const [passwordError, setPasswordError] = useState("");

//   // Validate password length
//   const validatePassword = (password) => {
//     if (password.length < 8) {
//       setPasswordError("Password must be at least 8 characters long");
//     } else {
//       setPasswordError("");
//     }
//   };

//   const handleSignupChange = (e) => {
//     const { name, value } = e.target;
//     setSignupData((prev) => ({ ...prev, [name]: value }));

//     if (name === "password") {
//       validatePassword(value);
//     }
//   };

//   const handleLoginChange = (e) => {
//     const { name, value } = e.target;
//     setLoginData((prev) => ({ ...prev, [name]: value }));
//   };

//   const handleError = (error) => {
//     console.error("Error:", error.response ? error.response.data : error.message);
//     toast.error(error.response?.data?.message || "An error occurred");
//   };

//   const handleSignupSubmit = async (e) => {
//     e.preventDefault();
//     if (signupData.password !== signupData.confirmPassword) {
//       return toast.error("Passwords do not match");
//     }
//     if (passwordError) {
//       return toast.error(passwordError);
//     }

//     try {
//       const response = await axios.post(`${url}/api/user/register`, signupData);
//       if (response.status === 200 && response.data.success) {
//         setShowLoginForm(true);
//         toast.success("Successfully Registered");
//       } else {
//         toast.error(response.data.message || "Registration failed");
//       }
//     } catch (error) {
//       handleError(error);
//     }
//   };

//   const handleLoginSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const response = await axios.post(`${url}/api/user/login`, loginData);
//       if (response.data.success) {
//         toast.success("Logged In Successfully");

//         // Store token and user data in localStorage
//         localStorage.setItem("auth-token", response.data.token);
//         localStorage.setItem("user", JSON.stringify(response.data.user));

//         // Update context with user data
//         handleUserLogin(response.data.token, response.data.user);
        
//         // Close the form and navigate
//         getUserProfile();
//         onClose();
//         navigate("/", { replace: true });
//       } else {
//         toast.error("Invalid Credentials");
//       }
//     } catch (error) {
//       handleError(error);
//     }
//   };

//   const toggleLoginForm = () => {
//     setShowLoginForm(!showLoginForm);
//   };

//   return (
//     <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md relative  max-h-[90vh] overflow-y-auto">
//       <button
//         className="absolute top-2 right-2 bg-gray-200 text-gray-700 rounded-full p-2"
//         onClick={onClose}
//       >
//         &times;
//       </button>
//       {showLoginForm ? (
//         <form onSubmit={handleLoginSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Login</h2>
//           <div className="space-y-4">
//             <input
//               type="email"
//               name="email"
//               value={loginData.email}
//               onChange={handleLoginChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showLoginPassword ? "text" : "password"}
//                 name="password"
//                 value={loginData.password}
//                 onChange={handleLoginChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowLoginPassword(!showLoginPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showLoginPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full"
//           >
//             Login
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Don't have an account yet? Sign up here.
//           </p>
//         </form>
//       ) : (
//         <form onSubmit={handleSignupSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Sign Up</h2>
//           <div className="space-y-4">
//             <input
//               type="text"
//               name="firstName"
//               value={signupData.firstName}
//               onChange={handleSignupChange}
//               placeholder="First Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="lastName"
//               value={signupData.lastName}
//               onChange={handleSignupChange}
//               placeholder="Last Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="email"
//               name="email"
//               value={signupData.email}
//               onChange={handleSignupChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showSignupPassword ? "text" : "password"}
//                 name="password"
//                 value={signupData.password}
//                 onChange={handleSignupChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowSignupPassword(!showSignupPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showSignupPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             <div className="relative">
//               <input
//                 type={showConfirmPassword ? "text" : "password"}
//                 name="confirmPassword"
//                 value={signupData.confirmPassword}
//                 onChange={handleSignupChange}
//                 placeholder="Confirm Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showConfirmPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             {passwordError && (
//               <p className="text-red-500 text-sm">{passwordError}</p>
//             )}
//             <input
//               type="tel"
//               name="phone"
//               value={signupData.phone}
//               onChange={handleSignupChange}
//               placeholder="Phone"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="street"
//               value={signupData.street}
//               onChange={handleSignupChange}
//               placeholder="Street"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="city"
//               value={signupData.city}
//               onChange={handleSignupChange}
//               placeholder="City"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="country"
//               value={signupData.country}
//               onChange={handleSignupChange}
//               placeholder="Country"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full"
//           >
//             Sign Up
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Already have an account? Login here.
//           </p>
//         </form>
//       )}
//     </div>
//   );
// }

// export default SignupLogin;





// signin and login working with spinner but showing the username on the header 
import React, { useState, useContext } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { LiaEyeSolid, LiaEyeSlashSolid } from "react-icons/lia";
import { MenuContext } from "../../context/MenuContext";
import AuthContext from "../../context/AuthContext";

function SignupLogin({ onClose }) {
  const navigate = useNavigate();
  const [ state, dispatch ] = useContext(AuthContext)
  const { handleUserLogin, getUserProfile, fetchCartData, setCartItems } = useContext(MenuContext);
  
  const [url] = useState("http://localhost:3000");
    // const [url] = useState("https://food-project-api.onrender.com");
  
  const [signupData, setSignupData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    confirmPassword: "",
    phone: "",
    street: "",
    city: "",
    country: "",
  });

  const [loginData, setLoginData] = useState({
    email: "",
    password: "",
  });

  const [showLoginForm, setShowLoginForm] = useState(false);
  const [showSignupPassword, setShowSignupPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [showLoginPassword, setShowLoginPassword] = useState(false);
  const [passwordError, setPasswordError] = useState("");
  const [isLoading, setIsLoading] = useState(false); // New loading state

  // Validate password length
  const validatePassword = (password) => {
    if (password.length < 8) {
      setPasswordError("Password must be at least 8 characters long");
    } else {
      setPasswordError("");
    }
  };

  const handleSignupChange = (e) => {
    const { name, value } = e.target;
    setSignupData((prev) => ({ ...prev, [name]: value }));

    if (name === "password") {
      validatePassword(value);
    }
  };

  const handleLoginChange = (e) => {
    const { name, value } = e.target;
    setLoginData((prevData) => ({ ...prevData, [name]: value }));
  };

  const handleError = (error) => {
    console.error("Error:", error.response ? error.response.data : error.message);
    toast.error(error.response?.data?.message || "An error occurred");
  };

  const handleSignupSubmit = async (e) => {
    e.preventDefault();
    if (signupData.password !== signupData.confirmPassword) {
      return toast.error("Passwords do not match");
    }
    if (passwordError) {
      return toast.error(passwordError);
    }

    setIsLoading(true); // Start loading

    try {
      const response = await axios.post(`${url}/api/user/register`, signupData);
      if (response.status === 200 && response.data.success) {
        setShowLoginForm(true);
        toast.success("Successfully Registered");
      } else {
        toast.error(response.data.message || "Registration failed");
        localStorage.setItem("auth-token", response.data.token);
        localStorage.setItem("user", JSON.stringify(response.data.user));

        //Dispatch user data to context
        dispatch({ type: "setToken", payload: response.data.token });

        //Handle any cart data if available
        const cartDataItem = JSON.parse(localStorage.getItem("cartItems"));
        if (cartDataItem) {
          console.log("request made");
          await Promise.all(cartDataItem?.menus?.map(async (item) => {
            
           
            // https://food-project-api.onrender.com/api/add-to-cart
            // const response = await fetch("http://food-project-api.onrender.com/api/add-to-cart",
            const cartresponse = await fetch("https://food-project-api.onrender.com/add-to-cart", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${getItem("auth-token")}`,  // Use the token directly
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ productId: item.menu._id, quantity: item.quantity }),
            });

            const cartdata = await cartresponse.json();
            // console.log( "todday", cartdata);
            if (response.ok) {
              setCartItems(cartdata && cartdata.menus);
              fetchCartData();
              showHide("success", "added to cart successfully")
            } else {
              // console.error(Failed to add items to the backend cart);
            }
          }));
          deleteItem("cart");
        }

        // if (cartDataItem) {
        //   console.log("request made");
        //   await Promise.all(
        //     cartDataItem?.products?.map(async (item) => {
        //       const cartResponse = await axios.post(
        //         "http://food-project-api.onrender.com/api/add-to-cart", { productId: item.menu._id, quantity: item.quantity },
        //         {
        //           headers: {
        //             "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Correct string interpolation
        //             "Content-Type": "application/json",
        //           },
        //         }
        //       );
              
        //       if (cartResponse.status === 200) {
        //         setCartItems(cartResponse.data.menus);
        //         fetchCart();
        //         await getUserProfile(); // Fetch updated user profile on login
        //         onClose();
        //         navigate("/", { replace: true });
        //         console.log("success", "added to cart successfully"); 
        //       }else {
        //         console.error("Failed to add items to the backend cart");
        //       }
        //     })
        //   );
        //   localStorage.removeItem("cartItems");
        // }

        // Update context with user data and redirect
        await getUserProfile(); // Fetch updated user profile on login
        navigate("/");
        window.location.reload()
        console.log("success", "You are now logged in");
      }
    } catch (error) {
      handleError(error);
    } finally {
      setIsLoading(false); // Stop loading
    }
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();

     const { email, password } = loginData;
     if (!email || !password) {
      console.log("error", "Email and Password are required");
      return;
     }

    try {
      const response = await axios.post(`${url}/api/user/login`, loginData);
      console.log(response);
      
      if (response.data.success) {
        const cartDataItem = JSON.parse(localStorage.getItem("cartItems"));
        console.log("localstorage cart", cartDataItem)
        toast.success("Logged In Successfully");
        localStorage.setItem("auth-token", response.data.token);
        if(cartDataItem){
          await Promise.all(cartDataItem?.menus?.map(async (item) => {
            
            // https://food-project-api.onrender.com/api/add-to-cart
            const CartResponse = await fetch("https://food-project-api.onrender.com/api/add-to-cart", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Use the token directly
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ productId: item.menu._id, quantity: item.quantity }),
            });
  
            const cartdata = await CartResponse.json();
            console.log(cartdata.data, "Login cart")
            if (CartResponse.ok) {
              setCartItems(cartdata && cartdata.data)
              await fetchCartData();
              toast.success("added to cart successfully")
            } else {
              console.error("Failed to add items to the backend cart");
            }
          }));
        }

        localStorage.removeItem("cartItems")
        localStorage.setItem("user", JSON.stringify(response.data.user));
        handleUserLogin(response.data.token, response.data.user);
       
        getUserProfile();
        onClose();
        navigate("/", { replace: true });
      } else {
        toast.error("Invalid Credentials");
        localStorage.setItem('user', JSON.stringify(userData)); // where userData is the new user object

      }
    } catch (error) {
      handleError(error);
    }
  };

  const toggleLoginForm = () => {
    setShowLoginForm(!showLoginForm);
  };

  return (
    <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md relative max-h-[90vh] overflow-y-auto">
      <button
        className="absolute top-2 right-2 bg-gray-200 text-gray-700 rounded-full p-2"
        onClick={onClose}
      >
        &times;
      </button>
      {showLoginForm ? (
        <form onSubmit={handleLoginSubmit}>
          <h2 className="text-xl font-semibold mb-4">Login</h2>
          <div className="space-y-4">
            <input
              type="email"
              name="email"
              value={loginData.email}
              onChange={handleLoginChange}
              placeholder="Email"
              className="border rounded-md p-2 w-full"
              required
            />
            <div className="relative">
              <input
                type={showLoginPassword ? "text" : "password"}
                name="password"
                value={loginData.password}
                onChange={handleLoginChange}
                placeholder="Password"
                className="border rounded-md p-2 w-full"
                required
              />
              <button
                type="button"
                onClick={() => setShowLoginPassword(!showLoginPassword)}
                className="absolute right-2 top-1/2 transform -translate-y-1/2"
              >
                {showLoginPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
              </button>
            </div>
          </div>
          <button
            type="submit"
            className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full"
          >
            Login
          </button>
          <p
            className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
            onClick={toggleLoginForm}
          >
            Don't have an account yet? Sign up here.
          </p>
        </form>
      ) : (
        <form onSubmit={handleSignupSubmit}>
          <h2 className="text-xl font-semibold mb-4">Sign Up</h2>
          <div className="space-y-4">
            <input
              type="text"
              name="firstName"
              value={signupData.firstName}
              onChange={handleSignupChange}
              placeholder="First Name"
              className="border rounded-md p-2 w-full"
              required
            />
            <input
              type="text"
              name="lastName"
              value={signupData.lastName}
              onChange={handleSignupChange}
              placeholder="Last Name"
              className="border rounded-md p-2 w-full"
              required
            />
            <input
              type="email"
              name="email"
              value={signupData.email}
              onChange={handleSignupChange}
              placeholder="Email"
              className="border rounded-md p-2 w-full"
              required
            />
            <div className="relative">
              <input
                type={showSignupPassword ? "text" : "password"}
                name="password"
                value={signupData.password}
                onChange={handleSignupChange}
                placeholder="Password"
                className="border rounded-md p-2 w-full"
                required
              />
              <button
                type="button"
                onClick={() => setShowSignupPassword(!showSignupPassword)}
                className="absolute right-2 top-1/2 transform -translate-y-1/2"
              >
                {showSignupPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
              </button>
            </div>
            <div className="relative">
              <input
                type={showConfirmPassword ? "text" : "password"}
                name="confirmPassword"
                value={signupData.confirmPassword}
                onChange={handleSignupChange}
                placeholder="Confirm Password"
                className="border rounded-md p-2 w-full"
                required
              />
              <button
                type="button"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="absolute right-2 top-1/2 transform -translate-y-1/2"
              >
                {showConfirmPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
              </button>
            </div>
            {passwordError && (
              <p className="text-red-500 text-sm">{passwordError}</p>
            )}
            <input
              type="tel"
              name="phone"
              value={signupData.phone}
              onChange={handleSignupChange}
              placeholder="Phone"
              className="border rounded-md p-2 w-full"
              required
            />
            <input
              type="text"
              name="street"
              value={signupData.street}
              onChange={handleSignupChange}
              placeholder="Street"
              className="border rounded-md p-2 w-full"
              required
            />
            <input
              type="text"
              name="city"
              value={signupData.city}
              onChange={handleSignupChange}
              placeholder="City"
              className="border rounded-md p-2 w-full"
              required
            />
            <input
              type="text"
              name="country"
              value={signupData.country}
              onChange={handleSignupChange}
              placeholder="Country"
              className="border rounded-md p-2 w-full"
              required
            />
          </div>
          <button
            type="submit"
            className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full flex items-center justify-center"
          >
            {isLoading ? (
              <span className="loader"></span>
            ) : (
              "Sign Up"
            )}
          </button>
          <p
            className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
            onClick={toggleLoginForm}
          >
            Already have an account? Login here.
          </p>
        </form>
      )}
    </div>
  );
}

export default SignupLogin;


// with spinner oct 30th not sigingin and not logging in
// import React, { useState, useContext } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";
// import { LiaEyeSolid, LiaEyeSlashSolid } from "react-icons/lia";
// import { MenuContext } from "../../context/MenuContext";
// import AuthContext from "../../context/AuthContext";

// function SignupLogin({ onClose }) {
//   const navigate = useNavigate();
//   const {dispatch, state} = useContext(AuthContext)
//   const { handleUserLogin, getUserProfile } = useContext(MenuContext);
  
//   const [url] = useState("http://food-project-api.onrender.com");
//   // const [url] = useState("https://food-project-api.onrender.com");
  
//   const [signupData, setSignupData] = useState({
//     firstName: "",
//     lastName: "",
//     email: "",
//     password: "",
//     confirmPassword: "",
//     phone: "",
//     street: "",
//     city: "",
//     country: "",
//   });

//   const [loginData, setLoginData] = useState({
//     email: "",
//     password: "",
//   });

//   const [showLoginForm, setShowLoginForm] = useState(false);
//   const [showSignupPassword, setShowSignupPassword] = useState(false);
//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);
//   const [showLoginPassword, setShowLoginPassword] = useState(false);
//   const [passwordError, setPasswordError] = useState("");
//   const [isLoading, setIsLoading] = useState(false); // New loading state

//   // Validate password length
//   const validatePassword = (password) => {
//     if (password.length < 8) {
//       setPasswordError("Password must be at least 8 characters long");
//     } else {
//       setPasswordError("");
//     }
//   };

//   // New handleSignup function
//   const handleSignupSubmit = async () => {
//     await getUserProfile(); // Fetch updated user profile after registration
//   };

//   const handleSignupChange = (e) => {
//     const { name, value } = e.target;
//     setSignupData((prev) => ({ ...prev, [name]: value }));

//     if (name === "password") {
//       validatePassword(value);
//     }
//   };

//   // const handleLoginChange = (e) => {
//   //   const { name, value } = e.target;
//   //   setLoginData((prev) => ({ ...prev, [name]: value }));
//   // };

//   const handleLoginChange = (e) => {
//     const { name, value } = e.target;
//     setLoginData((prevData) => ({
//       ...prevData,
//       [name]: value,
//     }));
//   };

//   // / Handle login form submit
//   const handleLoginSubmit = async (e) => {
//     e.preventDefault();
  
//     const { email, password } = loginData;
  
//     if (!email || !password) {
//       console.log("error", "Email and Password are required");
//       return;
//     }
  
//     try {
//       const response = await axios.post("http://127.0.0.1:3000/api/user/login", loginData);
//       console.log(response);
  
//       if (response.status !== 200) {
//         console.log("error", response.data.responseText[0]);
//       } else {
//         // Store token and user data in localStorage
//         localStorage.setItem("auth-token", response.data.token);
//         localStorage.setItem("user", JSON.stringify(response.data.user));
  
//         // Dispatch user data to context
//         dispatch({ type: "setToken", payload: response.data.token });
  
//         // Handle any cart data if available
//         const cartDataItem = JSON.parse(localStorage.getItem("cartItems"));
//         if (cartDataItem) {
//           console.log("request made");
//           await Promise.all(
//             cartDataItem?.products?.map(async (item) => {
//               const cartResponse = await axios.post(
//                 "http://food-project-api.onrender.com/api/add-to-cart",
//                 { productId: item.product._id, quantity: item.quantity },
//                 {
//                   headers: {
//                     "Content-Type": "application/json",
//                     Authorization: `Bearer ${localStorage.getItem("auth-token")}`,
//                     // "auth-token": localStorage.getItem("auth-token"),
//                   },
//                 }
//               );
  
//               if (cartResponse.status === 200) {
//                 setCartItems(cartResponse.data.products);
//                 fetchCart();
//                 await getUserProfile(); // Fetch updated user profile on login
//                 onClose();
//                 navigate("/", { replace: true });
//                 console.log("success", "added to cart successfully");
//               } else {
//                 console.error("Failed to add items to the backend cart");
//               }
//             })
//           );
//           localStorage.removeItem("cartItems");
//         }
  
//         // Update context with user data and redirect
//         await getUserProfile(); // Fetch updated user profile on login
//         navigate("/");
//         console.log("success", "You are now logged in");
//       }
//     } catch (error) {
//       console.log(error);
//       console.log("error", "An error occurred during login");
//     }
//   };
  
//   // const handleLoginSubmit = async (e) => {
//   //   e.preventDefault();
//   //   try {
//   //     const response = await axios.post(`${url}/api/user/login`, loginData);
//   //     if (response.data.success) {
//   //       toast.success("Logged In Successfully");

//   //       // Store token and user data in localStorage
//   //       localStorage.setItem("auth-token", response.data.token);
//   //       localStorage.setItem("user", JSON.stringify(response.data.user));

//   //       // Update context with user data
//   //       handleUserLogin(response.data.token, response.data.user);

//   //       // Close the form and navigate
//   //       await getUserProfile(); // Fetch updated user profile on login
//   //       onClose();
//   //       navigate("/", { replace: true });
//   //     } else {
//   //       toast.error("Invalid Credentials");
//   //     }
//   //   } catch (error) {
//   //     handleError(error);
//   //   }
//   // };

//   const toggleLoginForm = () => {
//     setShowLoginForm(!showLoginForm);
//   };

//   return (
//     <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md relative max-h-[90vh] overflow-y-auto">
//       <button
//         className="absolute top-2 right-2 bg-gray-200 text-gray-700 rounded-full p-2"
//         onClick={onClose}
//       >
//         &times;
//       </button>
//       {showLoginForm ? (
//         <form onSubmit={handleLoginSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Login</h2>
//           <div className="space-y-4">
//           <input
//             type="email"
//             name="email"
//             value={loginData.email}
//             onChange={handleLoginChange}
//             placeholder="Email"
//             className="border rounded-md p-2 w-full"
//             required
//           />
//             <div className="relative">
//             <input
//               type={showLoginPassword ? "text" : "password"}
//               name="password"
//               value={loginData.password}
//               onChange={handleLoginChange}
//               placeholder="Password"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//               <button
//                 type="button"
//                 onClick={() => setShowLoginPassword(!showLoginPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showLoginPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full"
//           >
//             Login
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Don't have an account yet? Sign up here.
//           </p>
//         </form>
//       ) : (
//         <form onSubmit={handleSignupSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Sign Up</h2>
//           <div className="space-y-4">
//             <input
//               type="text"
//               name="firstName"
//               value={signupData.firstName}
//               onChange={handleSignupChange}
//               placeholder="First Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="lastName"
//               value={signupData.lastName}
//               onChange={handleSignupChange}
//               placeholder="Last Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="email"
//               name="email"
//               value={signupData.email}
//               onChange={handleSignupChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showSignupPassword ? "text" : "password"}
//                 name="password"
//                 value={signupData.password}
//                 onChange={handleSignupChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowSignupPassword(!showSignupPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showSignupPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             <div className="relative">
//               <input
//                 type={showConfirmPassword ? "text" : "password"}
//                 name="confirmPassword"
//                 value={signupData.confirmPassword}
//                 onChange={handleSignupChange}
//                 placeholder="Confirm Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showConfirmPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             {passwordError && (
//               <p className="text-red-500 text-sm">{passwordError}</p>
//             )}
//             <input
//               type="tel"
//               name="phone"
//               value={signupData.phone}
//               onChange={handleSignupChange}
//               placeholder="Phone"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="street"
//               value={signupData.street}
//               onChange={handleSignupChange}
//               placeholder="Street"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="city"
//               value={signupData.city}
//               onChange={handleSignupChange}
//               placeholder="City"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="country"
//               value={signupData.country}
//               onChange={handleSignupChange}
//               placeholder="Country"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full flex items-center justify-center"
//           >
//             {isLoading ? (
//               <span className="loader"></span> // Replace with your spinner component
//             ) : (
//               "Sign Up"
//             )}
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Already have an account? Login here.
//           </p>
//         </form>
//       )}
//     </div>
//   );
// }

// export default SignupLogin;


// signin and login working with spinner but showing the username on the header 
// import React, { useState, useContext } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";
// import { LiaEyeSolid, LiaEyeSlashSolid } from "react-icons/lia";
// import { MenuContext } from "../../context/MenuContext";

// function SignupLogin({ onClose }) {
//   const navigate = useNavigate();
//   const { handleUserLogin, getUserProfile } = useContext(MenuContext);
  
//   const [url] = useState("http://food-project-api.onrender.com");
//   // const [url] = useState("https://food-project-api.onrender.com");
  
//   const [signupData, setSignupData] = useState({
//     firstName: "",
//     lastName: "",
//     email: "",
//     password: "",
//     confirmPassword: "",
//     phone: "",
//     street: "",
//     city: "",
//     country: "",
//   });

//   const [loginData, setLoginData] = useState({
//     email: "",
//     password: "",
//   });

//   const [showLoginForm, setShowLoginForm] = useState(false);
//   const [showSignupPassword, setShowSignupPassword] = useState(false);
//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);
//   const [showLoginPassword, setShowLoginPassword] = useState(false);
//   const [passwordError, setPasswordError] = useState("");
//   const [isLoading, setIsLoading] = useState(false); // New loading state

//   // Validate password length
//   const validatePassword = (password) => {
//     if (password.length < 8) {
//       setPasswordError("Password must be at least 8 characters long");
//     } else {
//       setPasswordError("");
//     }
//   };

// // new
// const handleSignup = async () => {
//   // Registration logic...
//   await getUserProfile(); // Fetch updated user profile after registration
// };

//   const handleSignupChange = (e) => {
//     const { name, value } = e.target;
//     setSignupData((prev) => ({ ...prev, [name]: value }));

//     if (name === "password") {
//       validatePassword(value);
//     }
//   };

//   const handleLoginChange = (e) => {
//     const { name, value } = e.target;
//     setLoginData((prev) => ({ ...prev, [name]: value }));
//   };

//   const handleError = (error) => {
//     console.error("Error:", error.response ? error.response.data : error.message);
//     toast.error(error.response?.data?.message || "An error occurred");
//   };

//   const handleSignupSubmit = async (e) => {
//     e.preventDefault();
//     if (signupData.password !== signupData.confirmPassword) {
//       return toast.error("Passwords do not match");
//     }
//     if (passwordError) {
//       return toast.error(passwordError);
//     }

//     setIsLoading(true); // Start loading

//     try {
//       const response = await axios.post(`${url}/api/user/register`, signupData);
//       if (response.status === 200 && response.data.success) {
//         setShowLoginForm(true);
//         toast.success("Successfully Registered");
//       } else {
//         toast.error(response.data.message || "Registration failed");
//       }
//     } catch (error) {
//       handleError(error);
//     } finally {
//       setIsLoading(false); // Stop loading
//     }
//   };

//   const handleLoginSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const response = await axios.post(`${url}/api/user/login`, loginData);
//       if (response.data.success) {
//         toast.success("Logged In Successfully");

//         // Store token and user data in localStorage
//         localStorage.setItem("auth-token", response.data.token);
//         localStorage.setItem("user", JSON.stringify(response.data.user));

//         // Update context with user data
//         handleUserLogin(response.data.token, response.data.user);

        
        
        
//         // Close the form and navigate
//         getUserProfile();
//         onClose();
//         navigate("/", { replace: true });
//       } else {
//         toast.error("Invalid Credentials");
//       }
//     } catch (error) {
//       handleError(error);
//     }
//   };

//   const toggleLoginForm = () => {
//     setShowLoginForm(!showLoginForm);
//   };

//   return (
//     <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md relative max-h-[90vh] overflow-y-auto">
//       <button
//         className="absolute top-2 right-2 bg-gray-200 text-gray-700 rounded-full p-2"
//         onClick={onClose}
//       >
//         &times;
//       </button>
//       {showLoginForm ? (
//         <form onSubmit={handleLoginSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Login</h2>
//           <div className="space-y-4">
//             <input
//               type="email"
//               name="email"
//               value={loginData.email}
//               onChange={handleLoginChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showLoginPassword ? "text" : "password"}
//                 name="password"
//                 value={loginData.password}
//                 onChange={handleLoginChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowLoginPassword(!showLoginPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showLoginPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full"
//           >
//             Login
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Don't have an account yet? Sign up here.
//           </p>
//         </form>
//       ) : (
//         <form onSubmit={handleSignupSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Sign Up</h2>
//           <div className="space-y-4">
//             <input
//               type="text"
//               name="firstName"
//               value={signupData.firstName}
//               onChange={handleSignupChange}
//               placeholder="First Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="lastName"
//               value={signupData.lastName}
//               onChange={handleSignupChange}
//               placeholder="Last Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="email"
//               name="email"
//               value={signupData.email}
//               onChange={handleSignupChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showSignupPassword ? "text" : "password"}
//                 name="password"
//                 value={signupData.password}
//                 onChange={handleSignupChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowSignupPassword(!showSignupPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showSignupPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             <div className="relative">
//               <input
//                 type={showConfirmPassword ? "text" : "password"}
//                 name="confirmPassword"
//                 value={signupData.confirmPassword}
//                 onChange={handleSignupChange}
//                 placeholder="Confirm Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showConfirmPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             {passwordError && (
//               <p className="text-red-500 text-sm">{passwordError}</p>
//             )}
//             <input
//               type="tel"
//               name="phone"
//               value={signupData.phone}
//               onChange={handleSignupChange}
//               placeholder="Phone"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="street"
//               value={signupData.street}
//               onChange={handleSignupChange}
//               placeholder="Street"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="city"
//               value={signupData.city}
//               onChange={handleSignupChange}
//               placeholder="City"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="country"
//               value={signupData.country}
//               onChange={handleSignupChange}
//               placeholder="Country"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full flex items-center justify-center"
//           >
//             {isLoading ? (
//               <span className="loader"></span> // Replace with your spinner component
//             ) : (
//               "Sign Up"
//             )}
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Already have an account? Login here.
//           </p>
//         </form>
//       )}
//     </div>
//   );
// }

// export default SignupLogin;



// with spinner oct 30th not sigingin and not logging in
// import React, { useState, useContext } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";
// import { LiaEyeSolid, LiaEyeSlashSolid } from "react-icons/lia";
// import { MenuContext } from "../../context/MenuContext";
// import AuthContext from "../../context/AuthContext";

// function SignupLogin({ onClose }) {
//   const navigate = useNavigate();
//   const {dispatch, state} = useContext(AuthContext)
//   const { handleUserLogin, getUserProfile } = useContext(MenuContext);
  
//   const [url] = useState("http://food-project-api.onrender.com");
//   // const [url] = useState("https://food-project-api.onrender.com");
  
//   const [signupData, setSignupData] = useState({
//     firstName: "",
//     lastName: "",
//     email: "",
//     password: "",
//     confirmPassword: "",
//     phone: "",
//     street: "",
//     city: "",
//     country: "",
//   });

//   const [loginData, setLoginData] = useState({
//     email: "",
//     password: "",
//   });

//   const [showLoginForm, setShowLoginForm] = useState(false);
//   const [showSignupPassword, setShowSignupPassword] = useState(false);
//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);
//   const [showLoginPassword, setShowLoginPassword] = useState(false);
//   const [passwordError, setPasswordError] = useState("");
//   const [isLoading, setIsLoading] = useState(false); // New loading state

//   // Validate password length
//   const validatePassword = (password) => {
//     if (password.length < 8) {
//       setPasswordError("Password must be at least 8 characters long");
//     } else {
//       setPasswordError("");
//     }
//   };

//   // New handleSignup function
//   const handleSignupSubmit = async () => {
//     await getUserProfile(); // Fetch updated user profile after registration
//   };

//   const handleSignupChange = (e) => {
//     const { name, value } = e.target;
//     setSignupData((prev) => ({ ...prev, [name]: value }));

//     if (name === "password") {
//       validatePassword(value);
//     }
//   };

//   // const handleLoginChange = (e) => {
//   //   const { name, value } = e.target;
//   //   setLoginData((prev) => ({ ...prev, [name]: value }));
//   // };

//   const handleLoginChange = (e) => {
//     const { name, value } = e.target;
//     setLoginData((prevData) => ({
//       ...prevData,
//       [name]: value,
//     }));
//   };

//   // / Handle login form submit
//   const handleLoginSubmit = async (e) => {
//     e.preventDefault();
  
//     const { email, password } = loginData;
  
//     if (!email || !password) {
//       console.log("error", "Email and Password are required");
//       return;
//     }
  
//     try {
//       const response = await axios.post("http://127.0.0.1:3000/api/user/login", loginData);
//       console.log(response);
  
//       if (response.status !== 200) {
//         console.log("error", response.data.responseText[0]);
//       } else {
//         // Store token and user data in localStorage
//         localStorage.setItem("auth-token", response.data.token);
//         localStorage.setItem("user", JSON.stringify(response.data.user));
  
//         // Dispatch user data to context
//         dispatch({ type: "setToken", payload: response.data.token });
  
//         // Handle any cart data if available
//         const cartDataItem = JSON.parse(localStorage.getItem("cartItems"));
//         if (cartDataItem) {
//           console.log("request made");
//           await Promise.all(
//             cartDataItem?.products?.map(async (item) => {
//               const cartResponse = await axios.post(
//                 "http://food-project-api.onrender.com/api/add-to-cart",
//                 { productId: item.product._id, quantity: item.quantity },
//                 {
//                   headers: {
//                     "Content-Type": "application/json",
//                     Authorization: `Bearer ${localStorage.getItem("auth-token")}`,
//                     // "auth-token": localStorage.getItem("auth-token"),
//                   },
//                 }
//               );
  
//               if (cartResponse.status === 200) {
//                 setCartItems(cartResponse.data.products);
//                 fetchCart();
//                 await getUserProfile(); // Fetch updated user profile on login
//                 onClose();
//                 navigate("/", { replace: true });
//                 console.log("success", "added to cart successfully");
//               } else {
//                 console.error("Failed to add items to the backend cart");
//               }
//             })
//           );
//           localStorage.removeItem("cartItems");
//         }
  
//         // Update context with user data and redirect
//         await getUserProfile(); // Fetch updated user profile on login
//         navigate("/");
//         console.log("success", "You are now logged in");
//       }
//     } catch (error) {
//       console.log(error);
//       console.log("error", "An error occurred during login");
//     }
//   };
  
//   // const handleLoginSubmit = async (e) => {
//   //   e.preventDefault();
//   //   try {
//   //     const response = await axios.post(`${url}/api/user/login`, loginData);
//   //     if (response.data.success) {
//   //       toast.success("Logged In Successfully");

//   //       // Store token and user data in localStorage
//   //       localStorage.setItem("auth-token", response.data.token);
//   //       localStorage.setItem("user", JSON.stringify(response.data.user));

//   //       // Update context with user data
//   //       handleUserLogin(response.data.token, response.data.user);

//   //       // Close the form and navigate
//   //       await getUserProfile(); // Fetch updated user profile on login
//   //       onClose();
//   //       navigate("/", { replace: true });
//   //     } else {
//   //       toast.error("Invalid Credentials");
//   //     }
//   //   } catch (error) {
//   //     handleError(error);
//   //   }
//   // };

//   const toggleLoginForm = () => {
//     setShowLoginForm(!showLoginForm);
//   };

//   return (
//     <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md relative max-h-[90vh] overflow-y-auto">
//       <button
//         className="absolute top-2 right-2 bg-gray-200 text-gray-700 rounded-full p-2"
//         onClick={onClose}
//       >
//         &times;
//       </button>
//       {showLoginForm ? (
//         <form onSubmit={handleLoginSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Login</h2>
//           <div className="space-y-4">
//           <input
//             type="email"
//             name="email"
//             value={loginData.email}
//             onChange={handleLoginChange}
//             placeholder="Email"
//             className="border rounded-md p-2 w-full"
//             required
//           />
//             <div className="relative">
//             <input
//               type={showLoginPassword ? "text" : "password"}
//               name="password"
//               value={loginData.password}
//               onChange={handleLoginChange}
//               placeholder="Password"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//               <button
//                 type="button"
//                 onClick={() => setShowLoginPassword(!showLoginPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showLoginPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full"
//           >
//             Login
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Don't have an account yet? Sign up here.
//           </p>
//         </form>
//       ) : (
//         <form onSubmit={handleSignupSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Sign Up</h2>
//           <div className="space-y-4">
//             <input
//               type="text"
//               name="firstName"
//               value={signupData.firstName}
//               onChange={handleSignupChange}
//               placeholder="First Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="lastName"
//               value={signupData.lastName}
//               onChange={handleSignupChange}
//               placeholder="Last Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="email"
//               name="email"
//               value={signupData.email}
//               onChange={handleSignupChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showSignupPassword ? "text" : "password"}
//                 name="password"
//                 value={signupData.password}
//                 onChange={handleSignupChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowSignupPassword(!showSignupPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showSignupPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             <div className="relative">
//               <input
//                 type={showConfirmPassword ? "text" : "password"}
//                 name="confirmPassword"
//                 value={signupData.confirmPassword}
//                 onChange={handleSignupChange}
//                 placeholder="Confirm Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showConfirmPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             {passwordError && (
//               <p className="text-red-500 text-sm">{passwordError}</p>
//             )}
//             <input
//               type="tel"
//               name="phone"
//               value={signupData.phone}
//               onChange={handleSignupChange}
//               placeholder="Phone"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="street"
//               value={signupData.street}
//               onChange={handleSignupChange}
//               placeholder="Street"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="city"
//               value={signupData.city}
//               onChange={handleSignupChange}
//               placeholder="City"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="country"
//               value={signupData.country}
//               onChange={handleSignupChange}
//               placeholder="Country"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full flex items-center justify-center"
//           >
//             {isLoading ? (
//               <span className="loader"></span> // Replace with your spinner component
//             ) : (
//               "Sign Up"
//             )}
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Already have an account? Login here.
//           </p>
//         </form>
//       )}
//     </div>
//   );
// }

// export default SignupLogin;


// signin and login working with spinner but showing the username on the header 
// import React, { useState, useContext } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";
// import { LiaEyeSolid, LiaEyeSlashSolid } from "react-icons/lia";
// import { MenuContext } from "../../context/MenuContext";

// function SignupLogin({ onClose }) {
//   const navigate = useNavigate();
//   const { handleUserLogin, getUserProfile } = useContext(MenuContext);
  
//   const [url] = useState("http://food-project-api.onrender.com");
//   // const [url] = useState("https://food-project-api.onrender.com");
  
//   const [signupData, setSignupData] = useState({
//     firstName: "",
//     lastName: "",
//     email: "",
//     password: "",
//     confirmPassword: "",
//     phone: "",
//     street: "",
//     city: "",
//     country: "",
//   });

//   const [loginData, setLoginData] = useState({
//     email: "",
//     password: "",
//   });

//   const [showLoginForm, setShowLoginForm] = useState(false);
//   const [showSignupPassword, setShowSignupPassword] = useState(false);
//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);
//   const [showLoginPassword, setShowLoginPassword] = useState(false);
//   const [passwordError, setPasswordError] = useState("");
//   const [isLoading, setIsLoading] = useState(false); // New loading state

//   // Validate password length
//   const validatePassword = (password) => {
//     if (password.length < 8) {
//       setPasswordError("Password must be at least 8 characters long");
//     } else {
//       setPasswordError("");
//     }
//   };

// // new
// const handleSignup = async () => {
//   // Registration logic...
//   await getUserProfile(); // Fetch updated user profile after registration
// };

//   const handleSignupChange = (e) => {
//     const { name, value } = e.target;
//     setSignupData((prev) => ({ ...prev, [name]: value }));

//     if (name === "password") {
//       validatePassword(value);
//     }
//   };

//   const handleLoginChange = (e) => {
//     const { name, value } = e.target;
//     setLoginData((prev) => ({ ...prev, [name]: value }));
//   };

//   const handleError = (error) => {
//     console.error("Error:", error.response ? error.response.data : error.message);
//     toast.error(error.response?.data?.message || "An error occurred");
//   };

//   const handleSignupSubmit = async (e) => {
//     e.preventDefault();
//     if (signupData.password !== signupData.confirmPassword) {
//       return toast.error("Passwords do not match");
//     }
//     if (passwordError) {
//       return toast.error(passwordError);
//     }

//     setIsLoading(true); // Start loading

//     try {
//       const response = await axios.post(`${url}/api/user/register`, signupData);
//       if (response.status === 200 && response.data.success) {
//         setShowLoginForm(true);
//         toast.success("Successfully Registered");
//       } else {
//         toast.error(response.data.message || "Registration failed");
//       }
//     } catch (error) {
//       handleError(error);
//     } finally {
//       setIsLoading(false); // Stop loading
//     }
//   };

//   const handleLoginSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const response = await axios.post(`${url}/api/user/login`, loginData);
//       if (response.data.success) {
//         toast.success("Logged In Successfully");

//         // Store token and user data in localStorage
//         localStorage.setItem("auth-token", response.data.token);
//         localStorage.setItem("user", JSON.stringify(response.data.user));

//         // Update context with user data
//         handleUserLogin(response.data.token, response.data.user);

        
        
        
//         // Close the form and navigate
//         getUserProfile();
//         onClose();
//         navigate("/", { replace: true });
//       } else {
//         toast.error("Invalid Credentials");
//       }
//     } catch (error) {
//       handleError(error);
//     }
//   };

//   const toggleLoginForm = () => {
//     setShowLoginForm(!showLoginForm);
//   };

//   return (
//     <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md relative max-h-[90vh] overflow-y-auto">
//       <button
//         className="absolute top-2 right-2 bg-gray-200 text-gray-700 rounded-full p-2"
//         onClick={onClose}
//       >
//         &times;
//       </button>
//       {showLoginForm ? (
//         <form onSubmit={handleLoginSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Login</h2>
//           <div className="space-y-4">
//             <input
//               type="email"
//               name="email"
//               value={loginData.email}
//               onChange={handleLoginChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showLoginPassword ? "text" : "password"}
//                 name="password"
//                 value={loginData.password}
//                 onChange={handleLoginChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowLoginPassword(!showLoginPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showLoginPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full"
//           >
//             Login
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Don't have an account yet? Sign up here.
//           </p>
//         </form>
//       ) : (
//         <form onSubmit={handleSignupSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Sign Up</h2>
//           <div className="space-y-4">
//             <input
//               type="text"
//               name="firstName"
//               value={signupData.firstName}
//               onChange={handleSignupChange}
//               placeholder="First Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="lastName"
//               value={signupData.lastName}
//               onChange={handleSignupChange}
//               placeholder="Last Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="email"
//               name="email"
//               value={signupData.email}
//               onChange={handleSignupChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showSignupPassword ? "text" : "password"}
//                 name="password"
//                 value={signupData.password}
//                 onChange={handleSignupChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowSignupPassword(!showSignupPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showSignupPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             <div className="relative">
//               <input
//                 type={showConfirmPassword ? "text" : "password"}
//                 name="confirmPassword"
//                 value={signupData.confirmPassword}
//                 onChange={handleSignupChange}
//                 placeholder="Confirm Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showConfirmPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             {passwordError && (
//               <p className="text-red-500 text-sm">{passwordError}</p>
//             )}
//             <input
//               type="tel"
//               name="phone"
//               value={signupData.phone}
//               onChange={handleSignupChange}
//               placeholder="Phone"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="street"
//               value={signupData.street}
//               onChange={handleSignupChange}
//               placeholder="Street"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="city"
//               value={signupData.city}
//               onChange={handleSignupChange}
//               placeholder="City"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="country"
//               value={signupData.country}
//               onChange={handleSignupChange}
//               placeholder="Country"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full flex items-center justify-center"
//           >
//             {isLoading ? (
//               <span className="loader"></span> // Replace with your spinner component
//             ) : (
//               "Sign Up"
//             )}
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Already have an account? Login here.
//           </p>
//         </form>
//       )}
//     </div>
//   );
// }

// export default SignupLogin;



// testing updated code to be sure cart is counting
// import React, { useContext } from "react";
// import { MdDelete, MdAdd, MdRemove } from "react-icons/md";
// import { Link } from "react-router-dom";
// import { MenuContext } from "../../context/MenuContext";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";

// function Cart() {
//   const {
//     cartItems,
//     removeCartItems,
//     updateCartItems,
//     url,
//   } = useContext(MenuContext);

//   const totalCartCount = () => {
//     // Safely handle cases where cartItems or cartItems.products may be undefined
//     if (cartItems && Array.isArray(cartItems.products)) {
//       return cartItems.products.reduce((total, item) => total + (item.quantity || 0), 0);
//     }
//     return 0;
//   };

//   const handleAddItem = (itemId) => {
//     updateCartItems(itemId, 1);
//     toast.success("Item added to cart");
//   };

//   const handleRemoveItem = (itemId) => {
//     removeCartItems(itemId);
//     toast.error("Item removed from cart");
//   };

//   const handleReduceItem = (itemId) => {
//     updateCartItems(itemId, -1);
//     toast.info("Item quantity reduced");
//   };

//   return (
//     <div className="bg-purple-100 py-10">
//       <h1 className="text-3xl font-bold text-center mb-8">Your Shop Cart</h1>
//       {(!cartItems || !cartItems.products || cartItems.products.length === 0) ? (
//         <p className="text-center text-lg">Your cart is empty</p>
//       ) : (
//         <>
//           <div className="overflow-x-auto">
//             <table className="w-full bg-white shadow-md rounded-lg hidden sm:table">
//               <thead className="bg-purple-200">
//                 <tr className="text-left">
//                   <th className="py-3 px-2 text-center sm:px-4">Action</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Item</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Image</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Price</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Quantity</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Amount</th>
//                 </tr>
//               </thead>
//               <tbody className="text-center">
//                 {cartItems.products?.map((item, index) => (
//                   <tr key={index} className="border-b">
//                     <td className="flex justify-center items-center space-x-2 py-2 px-2 sm:px-4">
//                       <button
//                         onClick={() => handleReduceItem(item.product._id)}
//                         className="p-2 text-blue-500 hover:bg-blue-100 rounded"
//                       >
//                         <MdRemove />
//                       </button>
//                       <button
//                         onClick={() => handleAddItem(item.product._id)}
//                         className="p-2 text-green-500 hover:bg-green-100 rounded"
//                       >
//                         <MdAdd />
//                       </button>
//                       <button
//                         onClick={() => handleRemoveItem(item.product._id)}
//                         className="p-2 text-orange-500 hover:bg-orange-100 rounded"
//                       >
//                         <MdDelete />
//                       </button>
//                     </td>
//                     <td className="py-2 px-2 sm:px-4">{item.product.name}</td>
//                     <td className="py-2 px-2 sm:px-4">
//                       <div className="flex justify-center">
//                         <img
//                           src={item.product?.img ? `${url}/uploads/${item.product.img}` : "default_image_url"}
//                           className="h-12 w-12 object-cover rounded"
//                           alt={item.name}
//                         />
//                       </div>
//                     </td>
//                     <td className="py-2 px-2 sm:px-4">₦{item.product.price ? item.product.price.toFixed(2) : "0.00"}</td>
//                     <td className="py-2 px-2 sm:px-4">{item.quantity || 0}</td>
//                     <td className="py-2 px-2 sm:px-4">
//                       ₦{item.product.price && item.quantity ? (item.product.price * item.quantity).toFixed(2) : "0.00"}
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           </div>

//           <div className="mt-6 px-4">
//             <div className="flex justify-between items-center">
//               <p className="text-lg font-semibold">
//                 Total Items in Cart: {totalCartCount()}
//               </p>
//               <Link
//                 to="/checkout"
//                 className="bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded"
//               >
//                 Checkout
//               </Link>
//             </div>
//           </div>
//         </>
//       )}
//     </div>
//   );
// }

// export default Cart;

// same code 21 november
// import React, { useContext} from "react";
// import { MdDelete, MdAdd, MdRemove } from "react-icons/md";
// import { Link } from "react-router-dom";
// import { MenuContext } from "../../context/MenuContext";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";

// function Cart() {
//   const {
//     cartItems,
//     removeCartItems,
//     updateCartItems,
//     url,
//   } = useContext(MenuContext);

//     useEffect(() => {
//     console.log("Cart items in Cart component:", cartItems); // Debug log to check cartItems
//   }, [cartItems]);

//   const totalCartCount = () => {
//     // Safely handle cases where cartItems or cartItems.products may be undefined
//     if (cartItems && Array.isArray(cartItems.products)) {
//       return cartItems.products.reduce((total, item) => total + (item.quantity || 0), 0);
//     }
//     return 0;
//   };

//   const handleAddItem = (itemId) => {
//     updateCartItems(itemId, 1);
//     toast.success("Item added to cart");
//   };

//   const handleRemoveItem = (itemId) => {
//     removeCartItems(itemId);
//     toast.error("Item removed from cart");
//   };

//   const handleReduceItem = (itemId) => {
//     updateCartItems(itemId, -1);
//     toast.info("Item quantity reduced");
//   };

//   return (
//     <div className="bg-purple-100 py-10">
//       <h1 className="text-3xl font-bold text-center mb-8">Your Shop Cart</h1>
//       {(!cartItems || !cartItems.products || cartItems.products.length === 0) ? (
//         <p className="text-center text-lg">Your cart is empty</p>
//       ) : (
//         <>
//           <div className="overflow-x-auto">
//             <table className="w-full bg-white shadow-md rounded-lg hidden sm:table">
//               <thead className="bg-purple-200">
//                 <tr className="text-left">
//                   <th className="py-3 px-2 text-center sm:px-4">Action</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Item</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Image</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Price</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Quantity</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Amount</th>
//                 </tr>
//               </thead>
//               <tbody className="text-center">
//                 {cartItems.products?.map((item, index) => (
//                   <tr key={index} className="border-b">
//                     <td className="flex justify-center items-center space-x-2 py-2 px-2 sm:px-4">
//                       <button
//                         onClick={() => handleReduceItem(item.product._id)}
//                         className="p-2 text-blue-500 hover:bg-blue-100 rounded"
//                       >
//                         <MdRemove />
//                       </button>
//                       <button
//                         onClick={() => handleAddItem(item.product._id)}
//                         className="p-2 text-green-500 hover:bg-green-100 rounded"
//                       >
//                         <MdAdd />
//                       </button>
//                       <button
//                         onClick={() => handleRemoveItem(item.product._id)}
//                         className="p-2 text-orange-500 hover:bg-orange-100 rounded"
//                       >
//                         <MdDelete />
//                       </button>
//                     </td>
//                     <td className="py-2 px-2 sm:px-4">{item.product.name}</td>
//                     <td className="py-2 px-2 sm:px-4">
//                       <div className="flex justify-center">
//                         <img
//                           src={item.product?.img ? `${url}/uploads/${item.product.img}` : "default_image_url"}
//                           className="h-12 w-12 object-cover rounded"
//                           alt={item.name}
//                         />
//                       </div>
//                     </td>
//                     <td className="py-2 px-2 sm:px-4">₦{item.product.price ? item.product.price.toFixed(2) : "0.00"}</td>
//                     <td className="py-2 px-2 sm:px-4">{item.quantity || 0}</td>
//                     <td className="py-2 px-2 sm:px-4">
//                       ₦{item.product.price && item.quantity ? (item.product.price * item.quantity).toFixed(2) : "0.00"}
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           </div>

//           <div className="mt-6 px-4">
//             <div className="flex justify-between items-center">
//               <p className="text-lg font-semibold">
//                 Total Items in Cart: {totalCartCount()}
//               </p>
//               <Link
//                 to="/checkout"
//                 className="bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded"
//               >
//                 Checkout
//               </Link>
//             </div>
//           </div>
//         </>
//       )}
//     </div>
//   );
// }

// export default Cart;






// import React, { useContext, useEffect } from "react";
// import { MdDelete, MdAdd, MdRemove } from "react-icons/md";
// import { Link } from "react-router-dom";
// import { MenuContext } from "../../context/MenuContext";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";

// function Cart() {
//   const {
//     cartItems,
//     removeCartItems,
//     // addCartItem,
//     // reduceCartItem,
//     updateCartItems,
//     url,
//   } = useContext(MenuContext);

// // old item 29 oct
//   useEffect(() => {
//     console.log("Cart items in Cart component:", cartItems); // Debug log to check cartItems
//   }, [cartItems]);

  
  

//   // const totalCartAmount = () => {
//   //   // let totalAmount = 0;
//   //     if (cartItems && Array.isArray(cartItems.products)) {
//   //       return cartItems.products.reduce((total, item) => total + (item.quantity || 0), 0);
        
//   //     }
    
//   //   return totalAmount.toFixed(2);
//   // };

//   const totalCartAmount = () => {
//     if (cartItems && Array.isArray(cartItems.products)) {
//       return cartItems.products.reduce((total, item) => {
//         const itemTotal = (item.price || 0) * (item.quantity || 0); // Calculate item total
//         return total + itemTotal;
//       }, 0).toFixed(2); // Return total with two decimal points
//     }
  
//     return "0.00"; // Default value if cart is empty or invalid
//   };
  
//   // just testing 22 november
//   // const calculateTotalPrice = (cart) => {
//   //   if (!cart || !Array.isArray(cart)) return 0;
  
//   //   return cart.reduce((total, item) => {
//   //     return total + (item.price || 0) * (item.quantity || 0);
//   //   }, 0).toFixed(2);
//   // };
  
//   // // Usage:
//   // const totalPrice = calculateTotalPrice(cartItems.products || cartItems);
  

//   const handleAddItem = (itemId) => {
//     // addCartItem(itemId);
//      updateCartItems(itemId, 1);
//     toast.success("Item added to cart");
//   };

//   const handleRemoveItem = (itemId) => {
//     removeCartItems(itemId);
//     toast.error("Item removed from cart");
//   };

//   const handleReduceItem = (itemId) => {
//     updateCartItems(itemId, -1);
//     // reduceCartItem(itemId);
//     toast.info("Item quantity reduced");
//   };

//   return (
//     <div className="bg-purple-100 py-10">
//       <h1 className="text-3xl font-bold text-center mb-8">Your Shop Cart</h1>
//       {(!cartItems || !cartItems.products || cartItems.products.length === 0) ? (
//         <p className="text-center text-lg">Your cart is empty</p>
//       ) : (
//         <>
//           <div className="overflow-x-auto">
//             <table className="w-full bg-white shadow-md rounded-lg hidden sm:table">
//               <thead className="bg-purple-200">
//                 <tr className="text-left">
//                   <th className="py-3 px-2 text-center sm:px-4">Action</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Item</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Image</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Price</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Quantity</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Amount</th>
//                 </tr>
//               </thead>
//               <tbody className="text-center">
//                 {console.log(cartItems)}
//                 {cartItems.products?.map((item, index) => (
//                   <tr key={index} className="border-b">
//                     <td className="flex justify-center items-center space-x-2 py-2 px-2 sm:px-4">
//                       <button
//                         onClick={() => handleReduceItem(item.product._id)}
//                         className="p-2 text-blue-500 hover:bg-blue-100 rounded"
//                       >
//                         <MdRemove />
//                       </button>
//                       <button
//                         onClick={() => handleAddItem(item.product._id)}
//                         className="p-2 text-green-500 hover:bg-green-100 rounded"
//                       >
//                         <MdAdd />
//                       </button>
//                       <button
//                         onClick={() => handleRemoveItem(item.product._id)}
//                         className="p-2 text-orange-500 hover:bg-orange-100 rounded"
//                       >
//                         <MdDelete />
//                       </button>
//                     </td>
//                     <td className="py-2 px-2 sm:px-4">{item.product.name}</td> 
//                     <td className="py-2 px-2 sm:px-4">
//                       <div className="flex justify-center">
//                         <img
//                           src={item.product?.img ? `http://food-project-api.onrender.com/uploads/${item.product.img}` : "default_image_url"}
//                           className="h-12 w-12 object-cover rounded"
//                           alt={item.name}
//                         />
//                       </div>
//                     </td>
//                     <td className="py-2 px-2 sm:px-4">₦{item.product.price ? item.product.price.toFixed(2) : '0.00'}</td>
//                     <td className="py-2 px-2 sm:px-4">{item.quantity || 0}</td>
//                     <td className="py-2 px-2 sm:px-4">
//                       ₦{item.product.price && item.quantity ? (item.product.price * item.quantity).toFixed(2) : '0.00'}
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>

//             {/* Mobile View */}
//             <div className="block sm:hidden">
//               {cartItems?.products?.map((item, index) => (
//                 <div key={index} className="bg-white shadow-md rounded-lg mb-4 p-4">
//                   <div className="flex items-center justify-between mb-2">
//                     <img
//                       src={item.img ? `${url}/uploads/${item.product.img}` : "default_image_url"}
//                       className="h-12 w-12 object-cover rounded"
//                       alt={item.name}
//                     />
//                     <div className="flex space-x-2">
//                       <button
//                         onClick={() => handleReduceItem(item.product._id)}
//                         className="p-2 text-blue-500 hover:bg-blue-100 rounded"
//                       >
//                         <MdRemove />
//                       </button>
//                       <button
//                         onClick={() => handleAddItem(item.product._id)}
//                         className="p-2 text-green-500 hover:bg-green-100 rounded"
//                       >
//                         <MdAdd />
//                       </button>
//                       <button
//                         onClick={() => handleRemoveItem(item.product._id)}
//                         className="p-2 text-orange-500 hover:bg-orange-100 rounded"
//                       >
//                         <MdDelete />
//                       </button>
//                     </div>
//                   </div>
//                   <div className="text-center mb-2">
//                     <h2 className="font-semibold text-lg">{item.product.name}</h2>
//                     <p>₦{item.product.price ? item.product.price.toFixed(2) : '0.00'}</p>
//                     <p>Quantity: {item.quantity || 0}</p>
//                     <p>Total: ₦{item.product.price && item.quantity ? (item.product.price * item.quantity).toFixed(2) : '0.00'}</p>
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>

//           <div className="mt-6 px-4">
//             <div className="flex justify-between items-center">
//               <p className="text-lg font-semibold">
//                 <b>Total Amount:</b> ₦{totalCartAmount()}
//               </p>
//               <Link
//                 to="/checkout"
//                 className="bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded"
//               >
//                 Checkout
//               </Link>
//             </div>
//           </div>
//         </>
//       )}
//     </div>
//   );
  
// }

// export default Cart;


// import React, { useContext, useState, useEffect } from 'react';
// import { MenuContext } from '../../context/MenuContext';
// import axios from 'axios';
// import { useNavigate } from 'react-router-dom';

// function Checkout() {
//   const { cartItems, url } = useContext(MenuContext);
//   const navigate = useNavigate();
//   const [formData, setFormData] = useState({
//     firstName: '',
//     lastName: '',
//     phone: '',
//     email: '',
//     address: '',
//   });
//   const [isLoading, setIsLoading] = useState(false);
//   const [error, setError] = useState(null);

//   useEffect(() => {
//     console.log('Cart items in Checkout:', cartItems);
//     console.log('Checkout component state:', { formData, isLoading, error });
//   }, [cartItems, formData, isLoading, error]);

//   // const calculateTotalAmount = () => {
//   //   let total = 0;
//   //   cartItems.forEach((item) => {
//   //     total += item.price * item.quantity;
//   //   });
//   //   return total.toFixed(2);
//   // };

//   const calculateTotalAmount = () => {
//     let total = 0;
  
//     // Safely access cartItems.products
//     const products = cartItems?.products || [];
  
//     products.forEach((item) => {
//       total += item.price * item.quantity;
//     });
  
//     return total.toFixed(2);
//   };
  
//   const handleInputChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   const handleFormSubmit = async (e) => {
//     e.preventDefault();
//     setIsLoading(true);
//     setError(null);
  
//     console.log('Form submitted with data:', formData);
//     console.log('Cart items before submission:', cartItems);
  
//     const { firstName, lastName, phone, address, email } = formData;
//     const amount = calculateTotalAmount();
//     const currency = 'NGN';
  
//     const payload = {
//       amount,
//       currency,
//       firstName,
//       lastName,
//       phone,
//       address,
//       email,
//       cart: cartItems,
//     };
  
//     console.log('Sending payload to backend:', payload);
  
//     try {
//       if (cartItems.length === 0) {
//         throw new Error('Cart is empty');
//       }
  
//       const token = localStorage.getItem('auth-token');
//       if (!token) {
//         throw new Error('Authentication token not found');
//       }

//       const createPaymentLink = async (payload) => {
//         try {
//           const token = localStorage.getItem('auth-token');
//           const response = await axios.post(`${url}/api/payment/initiate`, payload, {
//             headers: { Authorization: `Bearer ${token}` },
//           });
      
//           // Log the full response to debug
//           console.log('Full response from payment initiation API:', response.data);
      
//           if (response.data.success) {
//             const paymentLink = response.data.link;
//             window.location.href = paymentLink; // Redirect to Flutterwave payment page
//           } else {
//             throw new Error(response.data.error || 'Payment initiation failed');
//           }
//         } catch (error) {
//           console.error('Error creating payment link:', error);
//           throw error;
//         }
//       };
  
//       // Call the createPaymentLink function with the payload
//       await createPaymentLink(payload);
  
//     } catch (error) {
//       console.error('Error initiating payment:', error.message);
//       setError(error.message);
//     } finally {
//       setIsLoading(false);
//     }
//   };

//   return (
//     <div className="bg-gray-100 min-h-screen p-4 md:p-8">
//       <div className="container mx-auto flex flex-col lg:flex-row gap-8">
//         {/* Order Summary Section */}
//         <div className="w-full lg:w-1/2 bg-white p-4 rounded-lg shadow-lg">
//           <h1 className="font-bold text-xl md:text-2xl mb-4">Order Summary</h1>
//           {cartItems.length === 0 ? (
//             <p>Your cart is empty</p>
//           ) : (
//             <>
//               {/* Desktop Table */}
//               <div className="hidden sm:block">
//                 <table className="w-full mb-4">
//                   <thead>
//                     <tr className="border-b font-semibold">
//                       <th className="py-2">Item</th>
//                       <th className="py-2">Image</th>
//                       <th className="py-2">Price</th>
//                       <th className="py-2">Quantity</th>
//                       <th className="py-2">Amount</th>
//                     </tr>
//                   </thead>
//                   <tbody>
//                     {cartItems?.products?.map((item, index) => (
//                       <tr key={item.id} className="border-b text-center">
//                         <td className="py-2">{item.name}</td>
//                         <td className="py-2">
//                           <div className="flex justify-center">
//                             <img src={`${url}/uploads/${item.img}`} className="h-12 md:h-16" alt={item.name} />
//                           </div>
//                         </td>
//                         <td className="py-2">₦{item.price}</td>
//                         <td className="py-2">{item.quantity}</td>
//                         <td className="py-2">₦{(item.price * item.quantity).toFixed(2)}</td>
//                       </tr>
//                     ))}




//                   </tbody>
//                 </table>
//                 <div className="font-bold text-xl">
//                   <h1>Total = ₦{calculateTotalAmount()}</h1>
//                 </div>
//               </div>

//               {/* Mobile View */}
//               <div className="block sm:hidden">
//                 {cartItems?.products?.map((item, index) => (
//                   <div key={index} className="bg-white shadow-md rounded-lg mb-4 p-4">
//                     <div className="flex items-center justify-between mb-2">
//                       <img
//                         src={`${url}/uploads/${item.img}`}
//                         className="h-16 w-16 object-cover rounded"
//                         alt={item.name}
//                       />
//                       <div className="flex flex-col text-center flex-grow">
//                         <h2 className="font-semibold text-lg">{item.name}</h2>
//                         <p>₦{item.price}</p>
//                         <p>Quantity: {item.quantity}</p>
//                         <p>Total: ₦{(item.price * item.quantity).toFixed(2)}</p>
//                       </div>
//                     </div>
//                   </div>
//                 ))}
//                 <div className="font-bold text-xl text-center">
//                   <h1>Total = ₦{calculateTotalAmount()}</h1>
//                 </div>
//               </div>
//             </>
//           )}
//         </div>

//         {/* Delivery Information Section */}
//         <div className="w-full lg:w-1/2 bg-white p-4 rounded-lg shadow-lg">
//           <h1 className="mb-4 font-bold text-xl md:text-2xl text-center">Delivery Information</h1>
//           {error && <p className="text-red-500 mb-4">{error}</p>}
//           <form onSubmit={handleFormSubmit} id="orderId">
//             <div className="flex flex-col gap-4 mb-4">
//               <label className="font-semibold" htmlFor="firstName">First Name</label>
//               <input
//                 className="border border-gray-300 p-2 rounded-md"
//                 type="text"
//                 name="firstName"
//                 value={formData.firstName}
//                 onChange={handleInputChange}
//                 required
//               />
//             </div>
//             <div className="flex flex-col gap-4 mb-4">
//               <label className="font-semibold" htmlFor="lastName">Last Name</label>
//               <input
//                 className="border border-gray-300 p-2 rounded-md"
//                 type="text"
//                 name="lastName"
//                 value={formData.lastName}
//                 onChange={handleInputChange}
//                 required
//               />
//             </div>
//             <div className="flex flex-col gap-4 mb-4">
//               <label className="font-semibold" htmlFor="phone">Phone Number</label>
//               <input
//                 className="border border-gray-300 p-2 rounded-md"
//                 type="text"
//                 name="phone"
//                 value={formData.phone}
//                 onChange={handleInputChange}
//                 required
//               />
//             </div>
//             <div className="flex flex-col gap-4 mb-4">
//               <label className="font-semibold" htmlFor="email">Email</label>
//               <input
//                 className="border border-gray-300 p-2 rounded-md"
//                 type="text"
//                 name="email"
//                 value={formData.email}
//                 onChange={handleInputChange}
//                 required
//               />
//             </div>
//             <div className="flex flex-col gap-4 mb-4">
//               <label className="font-semibold" htmlFor="address">Address</label>
//               <textarea
//                 className="border border-gray-300 p-2 rounded-md"
//                 name="address"
//                 value={formData.address}
//                 onChange={handleInputChange}
//                 rows="6"
//                 required
//               ></textarea>
//             </div>
//             <button 
//               type="submit" 
//               className="bg-black text-white py-2 px-4 rounded-md hover:bg-orange-500 transition-colors duration-300 w-full"
//               disabled={isLoading || cartItems.length === 0}
//             >
//               {isLoading ? 'Processing...' : 'Pay Now'}
//             </button>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// }

// export default Checkout;



// 16th november

// import React, { useContext, useState, useEffect } from 'react';
// import { MenuContext } from '../../context/MenuContext';
// import axios from 'axios';
// import { useNavigate } from 'react-router-dom';

// function Checkout() {
//   const { cartItems, url } = useContext(MenuContext);
//   const navigate = useNavigate();
//   const [formData, setFormData] = useState({
//     firstName: '',
//     lastName: '',
//     phone: '',
//     email: '',
//     address: '',
//   });
//   const [isLoading, setIsLoading] = useState(false);
//   const [error, setError] = useState(null);
  

//   useEffect(() => {
//     console.log('Cart items in Checkout:', cartItems);
//   }, [cartItems]); 

//   // const calculateTotalAmount = () => {
//   //   let total = 0;
//   //   const products = cartItems?.products || []; // Safely access products
//   //   products.forEach((item) => {
//   //     const price = Number(item?.price || 0);
//   //     const quantity = Number(item?.quantity || 0);
//   //     total += price * quantity;
//   //   });
//   //   return total.toFixed(2);
//   // };

//   const calculateTotalAmount = () => {
//     let total = 0;
  
//     // Safely access products; default to an empty array
//     const products = Array.isArray(cartItems?.products) ? cartItems.products : [];
//     console.log("Products in calculateTotalAmount:", cartItems?.products);
//     console.log("Simulated cartItems:", cartItems);


//     products.forEach((item) => {
//       console.log("Item being processed:", item);
//       const price = Number(item?.price) || 0;
//       const quantity = Number(item?.quantity) || 0;
//       total += price * quantity;
//     });
    
  
//     // Iterate over the products array
//     products.forEach((item) => {
//       const price = Number(item?.price) || 0; // Ensure price is a valid number
//       const quantity = Number(item?.quantity) || 0; // Ensure quantity is a valid number
//       total += price * quantity; // Accumulate the total
//     });
  
//     // Return the total with two decimal places
//     return total.toFixed(2);
//   };
  

//   const handleInputChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };


//   const handleFormSubmit = async (e) => {
//     e.preventDefault();
//     setIsLoading(true);
//     setError(null);

//     const { firstName, lastName, phone, address, email } = formData;
//     const amount = calculateTotalAmount();
//     const currency = 'NGN';

//     const payload = {
//       amount,
//       currency,
//       firstName,
//       lastName,
//       phone,
//       address,
//       email,
//       cart: cartItems,
//     };

//     try {
//       if (!cartItems?.products?.length) {
//         throw new Error('Your cart is empty.');
//       }

//       const token = localStorage.getItem('auth-token');
//       if (!token) {
//         throw new Error('You need to log in to proceed.');
//       }

//       const response = await axios.post(`${url}/api/payment/initiate`, payload, {
//         headers: { Authorization: `Bearer ${token}` },
//       });

//       if (response.data?.success) {
//         const paymentLink = response.data.link;
//         window.location.href = paymentLink;
//       } else {
//         throw new Error(response.data.error || 'Failed to initiate payment.');
//       }
//     } catch (error) {
//       setError(error.message);
//     } finally {
//       setIsLoading(false);
//     }
//   };

//   return (
//     <div className="bg-gray-100 min-h-screen p-4 md:p-8">
//       <div className="container mx-auto flex flex-col lg:flex-row gap-8">
//         {/* Order Summary Section */}
//         <div className="w-full lg:w-1/2 bg-white p-4 rounded-lg shadow-lg">
//           <h1 className="font-bold text-xl md:text-2xl mb-4">Order Summary</h1>
//           {!cartItems?.products?.length ? (
//             <p>Your cart is empty</p>
//           ) : (
//             <>
//               {/* Desktop Table */}
//               <div className="hidden sm:block">
//                 <table className="w-full mb-4">
//                   <thead>
//                     <tr className="border-b font-semibold">
//                       <th className="py-2">Item</th>
//                       <th className="py-2">Image</th>
//                       <th className="py-2">Price</th>
//                       <th className="py-2">Quantity</th>
//                       <th className="py-2">Amount</th>
//                     </tr>
//                   </thead>
//                   <tbody>
//                     {cartItems.products.map((item, index) => {
//                       <tr></tr>
//                       const name = item?.product?.name || 'Unknown';
//                       const price = Number(item?.product?.price || 0);
//                       const quantity = Number(item?.quantity || 0);
//                       const imgSrc = item.product?.img
//                         ? `${url}/uploads/${item.product.img}`
//                         : 'default_image_url';
//                       const total = price * quantity;

//                       return (
//                         <tr key={index} className="border-b text-center">
//                           <td className="py-2">{name.product}</td>
//                           <td className="py-2">
//                             <img
//                               src={imgSrc}
//                               alt={name}
//                               className="h-12 md:h-16 object-cover"
//                             />
//                           </td>
//                           <td className="py-2">₦{price.toFixed(2)}</td>
//                           <td className="py-2">{quantity}</td>
//                           <td className="py-2">₦{total.toFixed(2)}</td>
//                         </tr>
//                       );
//                     })}
//                   </tbody>
//                 </table>
//                 <div className="font-bold text-xl">
//                   {/* <h1>Total = ₦{calculateTotalAmount()}</h1> */}
//                   <h1>Total = ₦{calculateTotalAmount()}</h1>

//                   {/* <p>Total: ₦{item.product.price && item.quantity ? (item.product.price * item.quantity).toFixed(2) : '0.00'}</p> */}
//                 </div>
//               </div>

//               {/* Mobile View */}
//               <div className="block sm:hidden">
//                 {cartItems.products.map((item, index) => {
//                   const name = item?.product?.name || 'Unknown';
//                   const price = Number(item?.product?.price || 0);
//                   const quantity = Number(item?.quantity || 0);
//                   const imgSrc = item.product?.img
//                     ? `${url}/uploads/${item.product.img}`
//                     : 'default_image_url';
//                   const total = price * quantity;

//                   return (
//                     <div key={index} className="bg-white shadow-md rounded-lg mb-4 p-4">
//                       <div className="flex items-center">
//                         <img
//                           src={imgSrc}
//                           alt={name}
//                           className="h-16 w-16 object-cover rounded"
//                         />
//                         <div className="ml-4">
//                           <h2 className="font-semibold text-lg">{name}</h2>
//                           <p>₦{price.toFixed(2)}</p>
//                           <p>Quantity: {quantity}</p>
//                           <p>Total: ₦{total.toFixed(2)}</p>
//                         </div>
//                       </div>
//                     </div>
//                   );
//                 })}
//                 <div className="font-bold text-xl text-center">
//                   <h1>Total = ₦{calculateTotalAmount()}</h1>
//                 </div>
//               </div>
//             </>
//           )}
//         </div>

//         {/* Delivery Information Section */}
//         <div className="w-full lg:w-1/2 bg-white p-4 rounded-lg shadow-lg">
//           <h1 className="mb-4 font-bold text-xl md:text-2xl text-center">Delivery Information</h1>
//           {error && <p className="text-red-500 mb-4">{error}</p>}
//           <form onSubmit={handleFormSubmit}>
//             {['firstName', 'lastName', 'phone', 'email', 'address'].map((field) => (
//               <div className="flex flex-col gap-4 mb-4" key={field}>
//                 <label className="font-semibold capitalize" htmlFor={field}>
//                   {field.replace(/([A-Z])/g, ' $1')}
//                 </label>
//                 <input
//                   className="border border-gray-300 p-2 rounded-md"
//                   type={field === 'address' ? 'textarea' : 'text'}
//                   name={field}
//                   value={formData[field]}
//                   onChange={handleInputChange}
//                   required
//                 />
//               </div>
//             ))}
//             <button
//               type="submit"
//               className="bg-black text-white py-2 px-4 rounded-md hover:bg-orange-500 transition-colors duration-300 w-full"
//               disabled={isLoading || !cartItems?.products?.length}
//             >
//               {isLoading ? 'Processing...' : 'Pay Now'}
//             </button>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// }

// export default Checkout;


    // old payment code
    // console.log("Sending payload to backend:", payload);

    // try {
    //   if (!cartItems?.products?.length) {
    //     throw new Error("Your cart is empty.");
    //   }

    //   const token = localStorage.getItem("auth-token");
    //   if (!token) {
    //     throw new Error("You need to log in to proceed.");
    //   }
    //    const createPaymentLink = async (payload) => {
    //     try {
    //       const token = localStorage.getItem("auth-token");
    //       const response = await axios.post(`${url}/api/payment/initiate`, payload, {
    //         headers: { Authorization: `Bearer ${token}`},
    //       });
          
    //       // Log the full response to debug
    //       console.log("Full response from payment initiation API:", response.data);

    //       if (response.data.success) {
    //         const paymentLink = response.data.link;
    //         window.location.href = paymentLink; // Redirect to Flutterwave payment page
    //       } else {
    //         throw new Error(response.data.error || "Failed to initiate payment.");
    //       }
    //     } catch (error) {
    //       console.error("Error creating payment link:", error);
    //       throw error;
    //     }
    //    };

    //    // Call the createPaymentLink funtion with the payload
    //    await createPaymentLink(payload);

    //   // const response = await axios.post(`${url}/api/payment/initiate`, payload, {
    //   //   headers: { Authorization: `Bearer ${token}` },
    //   // });

    //   // if (response.data?.success) {
    //   //   const paymentLink = response.data.link;
    //   //   window.location.href = paymentLink;
    //   // } else {
        
    //   // }
    // } catch (error) {
    //   console.error("Error initiating payment:", error.message);
    //   setError(error.message);
    // } finally {
    //   setIsLoading(false);
    // }


    
    
      // Define the function to create a payment link old
      // const createPaymentLink = async (payload) => {
      //   try {
      //     const response = await axios.post(`${url}/api/payment/initiate`, payload, {
      //       headers: { Authorization: `Bearer ${token}` },
      //     });
          
      //     // Log the full response to debug
      //     console.log("Full response from payment initiation API:", response.data);
    
      //     // Check if the response indicates success
      //     if (response.data.success) {
      //       const paymentLink = response.data.link;
      //       console.log("payment link", paymentLink)
      //       window.location.href = paymentLink; // Redirect to Flutterwave payment page
      //     } else {
      //       throw new Error(response.data.error || "Failed to initiate payment.");
      //     }
      //   } catch (error) {
      //     console.error("Error creating payment link:", error);
      //     throw error; // Rethrow error for outer catch block
      //   }
      // };


// old 30 jan 2025

// import { useContext, useEffect } from "react"
// import { useSearchParams } from "react-router-dom"
// import thax from "/thax.jpg";
// import { MenuContext } from "../../context/MenuContext";


// // import thax from './path/to/thax.png'; // Update the path according to your project structu


// const Thanks = () => {
//   const {createOrder, order} = useContext(MenuContext)
//   const [searchParams] = useSearchParams()
//   const tx_ref = searchParams.get("tx_ref")
//   const transaction_id = searchParams.get("transaction_id")
//   // window.location.reload(); //reload the current page
//   // const { firstName, lastName, totalAmount, Date } = body

//   // State to track if there was an error
//   const [error, setError] = useState(false);


 

//   console.log( transaction_id, tx_ref )
//   console.log("Order", order)
//   useEffect(()=>{
//     if (transaction_id && tx_ref) {
//       // if(order){
//         createOrder(transaction_id, tx_ref)
//       // }
//     }
//   }, [transaction_id, tx_ref])

//   return (
    
//       <div className="thanks-content">
//         <div className="mt-10 flex justify-center">
//         {/* <img src={thax} alt="Thank you" className="w-[600px] h-[450px]" /> */}
//         <video className=" w-[60vw] h-[60vh] rounded-full" src="/thanks-vid.mp4" loop autoPlay muted controls></video>
//         </div>
//         {/* <h1 className="font-bold text-center text-2xl">Thank You!</h1> */}
//         <p className="text-center font-bold text-2xl mt-3">
//           We appreciate your feedback. Have a great day!
//         </p>
//         <div className="font-bold text-2xl">
        
//         <div className="receipt bg-gray-100 shadow-md rounded-lg p-6 mt-8 mx-auto w-full max-w-md">
//           <h2 className="text-xl font-semibold text-center mb-4 text-indigo-600">
//             Payment Receipt
//           </h2>
//           <div className="flex flex-col gap-4">
//             <div className="flex justify-between">
//               <span className="font-medium">First Name: {order.firstName}</span>
//               {/* <span>{firstName || "N/A"}</span> */}
//             </div>
//             <div className="flex justify-between">
//               <span className="font-medium">Last Name: {order.lastName}</span>
//               {/* <span>{lastName || "N/A"}</span> */}
//             </div>
//             <div className="flex justify-between">
//               <span className="font-medium">Total Amount: {order.amount}</span>
//               {/* <span>₦{amount || "0.00"}</span> */}
//             </div>
//             <div className="flex justify-between">
//               <span className="font-medium">Date:</span>
//               <span className="">
//                 { order.date ? new Date(order.date).toLocaleString("en-GB", { day: "numeric", month: "long", year: "numeric" }) : ""}
//               </span>
//               {/* <span className="">
//   {order.date ? new Date(order.date).toLocaleString("en-GB", { day: "numeric", month: "long", year: "numeric" }).replace(",", "") : ""}
// </span> */}

//             </div>
//           </div>
//           <div className="listing">
//               <h2 className="mt-5 capitalize mb-2">Purchased Items</h2>
//               {/* <li className="p-2 font-serif mb-2 font-normal text-xl capitalize hover:bg-slate-300 bg-slate-200">new goods &nbsp;  -- 3 &nbsp;-- 200</li> */}
//               {order?.menus?.map((items)=> (
//                 <ul>
//                     <li className="p-2 font-serif mb-2 font-normal text-xl capitalize hover:bg-slate-300 bg-slate-200">{items?.menu?.name} &nbsp; -- {items?.quantity} -- &nbsp; {items?.menu?.price}</li>
//                 </ul>
//               ))}
//           </div>
//         </div>

// </div>
// </div>
      

//   );
// };

// export default Thanks;


// new 30th jan 2025

// import { useContext, useEffect, useState } from "react";
// import { useSearchParams } from "react-router-dom";
// import thax from "/thax.jpg";
// import { MenuContext } from "../../context/MenuContext";

// const Thanks = () => {
//   const { createOrder, order } = useContext(MenuContext);
//   const [searchParams] = useSearchParams();
//   const tx_ref = searchParams.get("tx_ref");
//   const transaction_id = searchParams.get("transaction_id");

//   // State to track if there was an error
//   const [error, setError] = useState(false);

//   console.log(transaction_id, tx_ref);
//   console.log("Order", order);

//   useEffect(() => {
//     if (transaction_id && tx_ref) {
//       // Try to create the order
//       createOrder(transaction_id, tx_ref)
//         .then(() => {
//           // Successful order creation - do nothing or show success message
//         })
//         .catch((err) => {
//           // If there's an error, set the error state to true
//           console.error("Error creating order:", err);
//           setError(true);
//         });
//     }
//   }, [transaction_id, tx_ref]);

//   // If there's an error, reload the page
//   useEffect(() => {
//     if (error) {
//       window.location.reload();
//     }
//   }, [error]);

//   return (
//     <div className="thanks-content">
//       <div className="mt-10 flex justify-center">
//         <video
//           className=" w-[60vw] h-[60vh] rounded-full"
//           src="/thanks-vid.mp4"
//           loop
//           autoPlay
//           muted
//           controls
//         ></video>
//       </div>
//       <p className="text-center font-bold text-2xl mt-3">
//         We appreciate your feedback. Have a great day!
//       </p>
//       <div className="font-bold text-2xl">
//         <div className="receipt bg-gray-100 shadow-md rounded-lg p-6 mt-8 mx-auto w-full max-w-md">
//           <h2 className="text-xl font-semibold text-center mb-4 text-indigo-600">
//             Payment Receipt
//           </h2>
//           <div className="flex flex-col gap-4">
//             <div className="flex justify-between">
//               <span className="font-medium">First Name: {order.firstName}</span>
//             </div>
//             <div className="flex justify-between">
//               <span className="font-medium">Last Name: {order.lastName}</span>
//             </div>
//             <div className="flex justify-between">
//               <span className="font-medium">Total Amount: {order.amount}</span>
//             </div>
//             <div className="flex justify-between">
//               <span className="font-medium">Date:</span>
//               <span className="">
//                 {order.date
//                   ? new Date(order.date).toLocaleString("en-GB", {
//                       day: "numeric",
//                       month: "long",
//                       year: "numeric",
//                     })
//                   : ""}
//               </span>
//             </div>
//           </div>
//           <div className="listing">
//             <h2 className="mt-5 capitalize mb-2">Purchased Items</h2>
//             {order?.menus?.map((items) => (
//               <ul key={items?.menu?.id}>
//                 <li className="p-2 font-serif mb-2 font-normal text-xl capitalize hover:bg-slate-300 bg-slate-200">
//                   {items?.menu?.name} &nbsp; -- {items?.quantity} -- &nbsp;
//                   {items?.menu?.price}
//                 </li>
//               </ul>
//             ))}
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Thanks;


// trying 30th jan 2025
// import { useContext, useEffect, useState } from "react";
// import { useSearchParams } from "react-router-dom";
// import { MenuContext } from "../../context/MenuContext";

// const Thanks = () => {
//   const { createOrder, order, clearCart } = useContext(MenuContext); // Assuming clearCart is a function to reset the cart
//   const [searchParams] = useSearchParams();
//   const tx_ref = searchParams.get("tx_ref");
//   const transaction_id = searchParams.get("transaction_id");

//   const [loading, setLoading] = useState(true); // To handle loading state
//   const [error, setError] = useState(""); // To store error messages

//   useEffect(() => {
//     if (transaction_id && tx_ref) {
//       // Attempt to create the order
//       createOrder(transaction_id, tx_ref)
//         .then((response) => {
//           console.log("Response from createOrder:", response); // Log the response to debug
//           if (response && response.success) {
//             // Clear the cart after successful order
//             clearCart();
//             setLoading(false); // Stop loading once the order is created successfully
//           } else {
//             // Set error message if order creation fails
//             setError("An error occurred while processing your order.");
//             setLoading(false);
//           }
//         })
//         .catch((err) => {
//           console.error("Error creating order:", err);
//           setError("An error occurred while processing your order.");
//           setLoading(false);
//         });
//     }
//   }, [transaction_id, tx_ref, createOrder, clearCart]);

//   if (loading) {
//     return (
//       <div className="loading-spinner">
//         <p>Loading...</p>
//       </div>
//     ); // Display loading state while waiting for the order to complete
//   }

//   return (
//     <div className="thanks-content">
//       {error && (
//         <div className="error-message">
//           <p>{error}</p>
//         </div>
//       )}
//       <div className="mt-10 flex justify-center">
//         <video
//           className=" w-[60vw] h-[60vh] rounded-full"
//           src="/thanks-vid.mp4"
//           loop
//           autoPlay
//           muted
//           controls
//         ></video>
//       </div>
//       <p className="text-center font-bold text-2xl mt-3">
//         We appreciate your feedback. Have a great day!
//       </p>
//       {order && (
//         <div className="font-bold text-2xl">
//           <div className="receipt bg-gray-100 shadow-md rounded-lg p-6 mt-8 mx-auto w-full max-w-md">
//             <h2 className="text-xl font-semibold text-center mb-4 text-indigo-600">
//               Payment Receipt
//             </h2>
//             <div className="flex flex-col gap-4">
//               <div className="flex justify-between">
//                 <span className="font-medium">First Name: {order.firstName}</span>
//               </div>
//               <div className="flex justify-between">
//                 <span className="font-medium">Last Name: {order.lastName}</span>
//               </div>
//               <div className="flex justify-between">
//                 <span className="font-medium">Total Amount: {order.amount}</span>
//               </div>
//               <div className="flex justify-between">
//                 <span className="font-medium">Date:</span>
//                 <span className="">
//                   {order.date
//                     ? new Date(order.date).toLocaleString("en-GB", {
//                         day: "numeric",
//                         month: "long",
//                         year: "numeric",
//                       })
//                     : ""}
//                 </span>
//               </div>
//             </div>
//             <div className="listing">
//               <h2 className="mt-5 capitalize mb-2">Purchased Items</h2>
//               {order?.menus?.map((items) => (
//                 <ul key={items?.menu?.id}>
//                   <li className="p-2 font-serif mb-2 font-normal text-xl capitalize hover:bg-slate-300 bg-slate-200">
//                     {items?.menu?.name} &nbsp; -- {items?.quantity} -- &nbsp;
//                     {items?.menu?.price}
//                   </li>
//                 </ul>
//               ))}
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Thanks;



// import React, { createContext, useState, useEffect, useRef, useContext } from "react";
// import axios from 'axios';
// import AuthContext from "./AuthContext";
// import { toast } from "react-toastify";

// export const MenuContext = createContext(null);

// export const MenuProvider = ({ children }) => {
//   const storedCart = JSON.parse(localStorage.getItem("cartItems"));
//   return storedCart || { products: [] };
// }
// const isAuthenticated = false;

// const MenuContextProvider = ({ children }) => {
//   // const [cartItems, setCartItems] = useState([]);
//   const [url] = useState("http://localhost:3000");
//   // const [url] = useState("https://food-project-api.onrender.com");
//   const [menuItems, setMenuItems] = useState([]);
//   const [breakItems, setBreakItems] = useState([]);
//   const [naijaItems, setNaijaItems] = useState([]);
//   const [saladItems, setSaladItems] = useState([]);
//   const [signatureItems, setSignatureItems] = useState([]);
//   const [restaurantList, setRestaurantList] = useState([]);
//   const [userName, setUserName] = useState('');
//   const [order, setOrder] = useState('');
//   const [userProfile, setUserProfile] = useState(null);
//   const [error, setError] = useState(null);
//   const [success, setSuccess] = useState(false);
//   const [token, setToken] = useState(localStorage.getItem('auth-token') || '');
//   const [ state, dispatch ] = useContext(AuthContext);
//   // const [cartItems, setCartItems] = useState([]);
//   const [cartItems, setCartItems] = useState({ products: [] });
//   const hasLoggedProfile = useRef(false); // Use a ref to track logging state
//   const [loading, setLoading] = useState(true)

//   const isAuthenticated = state.accessToken !== null
//   useEffect(() => {
//     if (isAuthenticated) {
//       fetchCartData()
//     }
//   }, [cartItems]);

//   useEffect(() => {
//     const savedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };
//     setCartItems(savedCart);
//   }, []);

//   useEffect(() => {
//     fetchMenuData();
//     fetchBreakData();
//     fetchNaijaData();
//     fetchSaladData();
//     fetchSignatureData();
//     fetchRestaurantData();
//   }, []);

//   // Sync local cart with server
//   // const syncLocalCartWithServer = async () => {
//   //   if (token) {
//   //     try {
//   //       const localCart = JSON.parse(localStorage.getItem('cartItems') || '[]');
//   //       if (localCart.length > 0) {
//   //         const response = await axios.post(`${url}/api/cart/sync`, { cartItems: localCart }, {
//   //           headers: { Authorization: `Bearer ${token}` }
//   //         });

//   //         if (response.data && response.data.cartData) {
//   //           setCartItems(response.data.cartData); // Update cart state with server data
//   //           localStorage.removeItem('cartItems'); // Clear local storage after successful sync
//   //         } else {
//   //           console.error('Server response does not contain cart data');
//   //         }
//   //       } else {
//   //         fetchCartData(token); // Fetch server cart data if local cart is empty
//   //       }
//   //     } catch (error) {
//   //       console.error("Error syncing cart data with server:", error);
//   //     }
//   //   } else {
//   //     const localCart = JSON.parse(localStorage.getItem('cartItems') || '[]');
//   //     setCartItems(localCart);
//   //   }
//   // };

//   // mr promise code 1st november
//   // fetch cart

//   const fetchMenuData = async () => {
//     try {
//       const response = await axios.get(`${url}/api/menu/featured`);
//       console.log("menu", response)
//       if (response.data.success) {
//         setMenuItems(response?.data?.data || []);
//       } else {
//         console.error('Failed to fetch menu data:', response.data.message);
//       }
//     } catch (error) {
//       console.error('Error fetching menu data:', error);
//     }
//   };

//   const fetchNaijaData = async () => {
//     try {
//       const response = await axios.get(`${url}/api/menu/naija`);
//       if (response.data.success) {
//         setNaijaItems(response.data.data || []);
//       } else {
//         console.error('Failed to fetch menu data:', response.data.message);
//       }
//     } catch (error) {
//       console.error('Error fetching menu data:', error);
//     }
//   };

//   const fetchSaladData = async () => {
//     try {
//       const response = await axios.get(`${url}/api/menu/salad`);
//       if (response.data.success) {
//         setSaladItems(response.data.data || []);
//       } else {
//         console.error('Failed to fetch menu data:', response.data.message);
//       }
//     } catch (error) {
//       console.error('Error fetching menu data:', error);
//     }
//   };

//   const fetchBreakData = async () => {
//     try {
//       const response = await axios.get(`${url}/api/menu/breakfast`);
//       if (response.data && response.data.success) {
//         setBreakItems(response.data.data || []);
//       } else {
//         console.error('Response does not indicate success:', response.data);
//       }
//     } catch (error) {
//       console.error('Error fetching breakfast data:', error.response ? error.response.data : error.message);
//     }
//   };

//   const fetchSignatureData = async () => {
//     try {
//       const response = await axios.get(`${url}/api/menu/signature`);
//       if (response.data.success) {
//         setSignatureItems(response.data.data || []);
//       } else {
//         console.error('Failed to fetch menu data:', response.data.message);
//       }
//     } catch (error) {
//       console.error('Error fetching menu data:', error);
//     }
//   };

//   const fetchRestaurantData = async () => {
//     try {
//       const response = await axios.get(`${url}/api/restaurant/list`);
//       if (response.data && response.data.success) {
//         setRestaurantList(response.data.data || []);
//       } else {
//         console.error('Response does not indicate success:', response.data);
//       }
//     } catch (error) {
//       console.error('Error fetching restaurant data:', error.response ? error.response.data : error.message);
//     }
//   };

// console.log(isAuthenticated) // shows false on console

// useEffect(() => console.log(cartItems, "cartItems 2") , [cartItems])

// const fetchCartData = async () => {
//   if (isAuthenticated) {
//     // authenticated

//     // https://food-project-api.onrender.com/api/carts
//     const res = await fetch("https://food-project-api.onrender.com/api/carts", {
//     // const res = await fetch("https://food-project-api.onrender.com/api/carts", {
//       method: "GET",
//       headers: {
//         "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Correct string interpolation
//         "Content-Type": "application/json",
//         // "auth-token": `${localStorage.getItem("auth-token")}`,
//       },
//     });
//     console.log(res, "fetchCart")

//     const data = await res.json();
//     console.log(data, "data")
//     console.log(cartItems, "data22")
//     if (res.ok) {
//       setCartItems(data.data); // change the operator both statement has to be true
//     } else {
//       toast("error", "Could not get cart");
//     }
//     // authenticated done
//   } else {
//     // unauthenticated  old just change 2 feb 2025
//     const localCart = localStorage.getItem("cartItems");
//     const parsedCart = localCart ? JSON.parse(localCart) : { menus: [] }; // new added 2 feb 2025

//     if (parsedCart.menus && parsedCart.menus.length > 0) {
//       setCartItems(parsedCart);
//     } else {
//       setCartItems([]); // Clear cart items if nothing is in local storage
//     }
//     if (localCart) {
//       setCartItems(JSON.parse(localCart));
//     } else {
//       setCartItems([]); // Clear cart items if nothing is in local storage
//     }
//     // unauthenticated done
//   }
// };

// const addToCart = async (productId, quantity, menu) => {
//   console.log("addToCart called with:", { productId, quantity, menu });
//   console.log("request made")
//   const userToken = localStorage.getItem("auth-token");
//   if (isAuthenticated) {
//     try {
//       if (!userToken) {
//         toast.error("User token is missing. Please log in.");
//         return;
//       }
//       const response = await fetch("https://food-project-api.onrender.com/api/add-to-cart", {
//         method: "POST",
//         headers: {
//           "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Send the token in the Authorization header
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ productId, quantity }),
//       });

//       if (!response.ok) {
//         const errorData = await response.json();
//         throw new Error(errorData.message || "Failed to add item to authenticated user's cart.");
//       }

//       const updatedCart = await response.json();
//       setCartItems(updatedCart.cart);
//       toast.success("Item added to cart");
//     } catch (error) {
//       console.error("Error adding to authenticated cart:", error.message);
//       toast.error(error.message || "Failed to add the item to the cart.");
//     }
//   } else {
//     try {
//       const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { menus: [] };

//       if (!Array.isArray(storedCart.menus)) {
//         storedCart.menus = [];
//       }

//       const itemIndex = storedCart.menus.findIndex(
//         (item) => item.menu._id === productId
//       );

//       if (itemIndex >= 0) {
//         storedCart.menus[itemIndex].quantity += quantity;
//         storedCart.menus[itemIndex].amount =
//           menu.price * storedCart.menus[itemIndex].quantity;
//       } else {
//         if (!menu) {
//           throw new Error("Product details are missing. Please provide the correct product.");
//         }

//         storedCart.menus.push({
//           menu,
//           quantity,
//           amount: menu.price * quantity,
//         });
//       }

//       localStorage.setItem("cartItems", JSON.stringify(storedCart));
//       setCartItems(storedCart); // Update state for components

//       toast.success("Item added to cart");
//     } catch (error) {
//       console.error("Error adding to cart (localStorage):", error);
//       toast.error("Failed to add the item to the cart.");
//     }
//   }
// };

//   const removeCartItems = async (productId) => {
//     if (window.confirm("Are you sure you want to delete this item?..")) {
//       if (isAuthenticated) {
//         try {
//           // authenticated

//           // https://food-project-api.onrender.com/api/delete-cart
//           const res = await fetch("https://food-project-api.onrender.com/api/delete-cart", {
//             method: "DELETE",
//             headers: {
//               "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Correct string interpolationfetch
//               "Content-Type": "application/json",
//             },
//             body: JSON.stringify({ productId }),
//           });
//           const data = await res.json();
//           if (res.ok) {
//             console.log("success", "Product Successfully deleted from cart");
//             setCartItems(data);
//             fetchCartData()
//             toast.info("Item removed from cart");
//             //   setCartItems(data || data.products);
//           }
//         } catch (error) {
//           console.log(error);
//         }
//         // authenticated done
//       } else {
//         // unauthenticated
//         const storedCart = JSON.parse(localStorage.getItem("cartItems")) || {
//           products: [],
//         };
//         const itemIndex = storedCart.menus.findIndex(
//           (item) => item.menu._id === productId
//         );
//         if (itemIndex >= 0) {
//           storedCart.menus.splice(itemIndex, 1);
//           localStorage.setItem("cartItems", JSON.stringify(storedCart));
//           setCartItems(storedCart); // Update the state to reflect changes in local storage
//           toast.info("Item removed from cart");
//           console.log("success", "Product removed from cart successfully!");
//         } else {
//           console.log("error", "Product not found in cart.");
//         }
//         // unauthenticated done
//       }
//     }
//   };

// const updateCartItems = async (productId, quantity, itemId, change) => {
//   if (isAuthenticated) {
//     try {
//       const res = await fetch("https://food-project-api.onrender.com/api/update-cart", {
//         method: "PUT",
//         headers: {
//           "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Correct string interpolation
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ productId, quantity }),
//       });

//       const data = await res.json();
//       console.log("Update cart data", data)
//       if (res.status === 200) {
//         const updatedCart = { ...cartItems };
//         const itemIndex = updatedCart.menus.findIndex(
//           (item) => item.menu._id === productId
//         );

//         if (itemIndex >= 0) {
//           updatedCart.menus[itemIndex].quantity += change;

//           if (updatedCart.menus[itemIndex].quantity <= 0) {
//             updatedCart.menus.splice(itemIndex, 1);
//           } else {
//             updatedCart.menus[itemIndex].amount =
//               updatedCart.menus[itemIndex].menu.price *
//               updatedCart.menus[itemIndex].quantity;
//           }
//         }
//         console.log("update cart", updatedCart)
//         setCartItems(updatedCart);
//       } else {
//         console.log("error", "Could not update cart");
//       }
//     } catch (error) {
//       console.error("Error updating cart:", error);
//       console.log("error", "An error occurred while updating your cart.");
//     }
//   }else {
//   const updatedCart = { ...cartItems };
//     const itemIndex = updatedCart.menus.findIndex(
//       (item) => item.menu._id === productId
//     );

//     if (itemIndex >= 0) {
//       updatedCart.menus[itemIndex].quantity += quantity;

//       if (updatedCart.menus[itemIndex].quantity <= 0) {
//         updatedCart.menus.splice(itemIndex, 1);
//       } else {
//         updatedCart.menus[itemIndex].amount =
//           updatedCart.menus[itemIndex].menu.price *
//           updatedCart.menus[itemIndex].quantity;
//       }
//     }

//     localStorage.setItem("cartItems", JSON.stringify(updatedCart));
//     setCartItems(updatedCart);
//   }
// };

//   useEffect(() => {
//     // Sync state with localStorage changes (if needed)
//     const storedCart = JSON.parse(localStorage.getItem("cartItems"));
//     if (storedCart) {
//       setCartItems(storedCart);
//     }
//   }, []);

//   const fetchUserData = () => {
//     try {
//       const userData = localStorage.getItem('user');
//       if (userData) {
//         const parsedData = JSON.parse(userData);
//         if (parsedData && parsedData.firstName) {
//           setUserName(parsedData.firstName);
//         }
//       }
//     } catch (error) {
//       console.error('Failed to fetch user data:', error);
//     }
//   };

// // new oct 30th
//   const getUserProfile = async () => {
//     const token = localStorage.getItem('auth-token');

//     // Only fetch profile if it hasn't been set yet
//     if (userProfile) return;

//     if (token) {
//       try {
//         const response = await fetch(`${url}/api/profile`, {
//           method: 'GET',
//           headers: {
//             'Authorization': `Bearer ${token}`,
//           },
//         });

//         if (!response.ok) {
//           const errorText = await response.text(); // Get error text for better insight
//           throw new Error(`Network response was not ok: ${errorText}`);
//         }

//         const data = await response.json();

//         // Log profile data old to test perplexity24 november
//         console.log("Profile data:", data.profile);

//         setUserProfile(data.profile);
//         setUserName(data.profile);
//       } catch (error) {
//         console.error('Failed to fetch user profile:', error);
//       }finally{
//         setLoading(false)
//       }
//     }
//   };

// useEffect(() => {
//   if (isAuthenticated) {
//     console.log("Fetching user profile...");
//     getUserProfile();
//   }
// }, [isAuthenticated]);

//   const updateUserProfile = async (profileData) => {
//     try {
//       const response = await axios.post(`${url}/api/profile/update`, profileData, {
//         headers: { Authorization: `Bearer ${token}` }
//       });
//       setUserProfile(response.data.profile);
//       setUserName(response.data.profile.firstName);
//     } catch (error) {
//       console.error("Error updating profile:", error);
//     }
//   };

//   const handleUserLogin = (newToken, user) => {
//     const token = localStorage.getItem("auth_token");
//     if (!token) {
//     }

//     setToken(newToken);
//     setUserName(user.name || 'Guest');
//     setUserProfile(user);

//     console.log(user);

//   };

//   console.log(isAuthenticated); //Debug to check the status

//   const createOrder = async (transaction_id, orderId) => {
//     try {
//       const res = await fetch("https://food-project-api.onrender.com/api/payment/verify", {
//         method: "POST",
//         headers: {
//           "Authorization": `Bearer ${localStorage.getItem("auth-token")}`,
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ transaction_id, orderId }),
//       });
//       console.log("order", res)
//       const data = await res.json();
//       if (res.ok) {
//         setOrder(data.order);
//         console.log(data.order && data);
//         console.log("Menu Order", order)
//         console.log("Menu Order data", data)
//         console.error('No data returned from createOrder');
//         setCartItems([]);
//       } else {
//         // toast("error", "insufficient Funds!...Credit your acct boss");
//       }
//     } catch (error) {
//       console.log(error);
//     }

//   };

//   const contextValue = {
//     cartItems,
//     addToCart,
//     removeCartItems,
//     order, setOrder,
//     loading,
//     menuItems,
//     breakItems,
//     saladItems,
//     naijaItems,
//     signatureItems,
//     restaurantList,
//     url,
//     setCartItems,
//     // syncLocalCartWithServer,
//     updateCartItems,
//     fetchUserData,
//     fetchCartData,
//     userName,
//     getUserProfile,
//     isAuthenticated,
//     userProfile,
//     updateUserProfile,
//     handleUserLogin,
//     error,
//     success,
//     createOrder,
//   }

//   return (
//     <MenuContext.Provider value={contextValue}>
//       {children}
//     </MenuContext.Provider>
//   );
// };

// export default MenuContextProvider;

// import React, { useEffect, useState, useContext } from "react";
// import { MenuContext } from "../../context/MenuContext";
// import avatar from '../../assets/avatar.png';

// function ProfileForm({ onClose }) {
//   const { userProfile, updateUserProfile, error, success, getUserProfile, url } = useContext(MenuContext);
//   const [profileData, setProfileData] = useState({
//     firstName: '',
//     lastName: '',
//     phone: '',
//     address: '',
//     image: '' 
//   });
//   const [selectedImage, setSelectedImage] = useState(null);

//   // Fetch the user profile on component mount
//   useEffect(() => {
//     const fetchProfile = async () => {
//       await getUserProfile();
//     };
//     fetchProfile();
//   }, [getUserProfile]);

//   // Update profile data state when userProfile changes
//   useEffect(() => {
//     if (userProfile) {
//       setProfileData({
//         firstName: userProfile.firstName || '',
//         lastName: userProfile.lastName || '',
//         phone: userProfile.phone || '',
//         address: userProfile.address || '',
//         image: userProfile.image || ''
//       });
//     }
//   }, [userProfile]);

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setProfileData(prevData => ({ ...prevData, [name]: value }));
//   };

//   const handleImageChange = (e) => {
//     const file = e.target.files[0];
//     setSelectedImage(file);

//     // Create a URL for the selected image to preview it immediately
//     const imageUrl = URL.createObjectURL(file);
//     setProfileData(prevData => ({ ...prevData, image: imageUrl }));
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (!profileData.firstName) {
//       alert("Please fill out all required fields.");
//       return;
//     }

//     const formData = new FormData();
//     formData.append('firstName', profileData.firstName);
//     formData.append('lastName', profileData.lastName);
//     formData.append('phone', profileData.phone);
//     formData.append('address', profileData.address);

//     // Include selected image only if it exists
//     if (selectedImage) {
//       formData.append('image', selectedImage);
//     }

//     try {
//       await updateUserProfile(formData);
//       // console.log("kyubvnwivw", profileData);
      
//       // console.log("new firstName", localStorage.setItem("user", JSON.stringify(profileData.firstName)));
//       // console.log(localStorage.getItem("user", JSON.parse(profileData.firstName)))
      
//       await getUserProfile(); // Refetch the profile after updating
//       onClose(); // Close the profile form after updating
//     } catch (error) {
//       console.error('Failed to update profile:', error);
//     }
//   };
  
//   return (
//     <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
//       <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md space-y-6 relative">
//         <button 
//           onClick={onClose}
//           className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
//         >
//           <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
//             <line x1="18" y1="6" x2="6" y2="18" />
//             <line x1="6" y1="6" x2="18" y2="18" />
//           </svg>
//         </button>
//         <h2 className="text-2xl font-semibold text-gray-800">Profile</h2>
//         {error && <p className="text-red-600">{error}</p>}
//         {success && <p className="text-green-600">Profile updated successfully!</p>}
//         <form onSubmit={handleSubmit} className="space-y-4">
//           <div className="flex items-center gap-4">
//             <div className="relative">
//               <img 
//                 src={profileData.image ? profileData.image : `${url}/uploads/${profileData.image}`} 
//                 alt="Profile" 
//                 className="w-24 h-24 object-cover rounded-full border-2 border-gray-300"
//               />
//               <input 
//                 type="file" 
//                 accept="image/*" 
//                 onChange={handleImageChange}
//                 id="profileImage"
//                 className="absolute inset-0 opacity-0 cursor-pointer"
//               />
//               <label htmlFor="profileImage" className="absolute bottom-0 right-0 bg-blue-500 text-white py-1 px-3 rounded-full text-xs cursor-pointer">
//                 Change
//               </label>
//             </div>
//             <div>
//               <input 
//                 name="firstName"
//                 value={profileData.firstName}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="First Name"
//                 className="border rounded-md p-2 w-full mb-2"
//                 required
//               />
//               <input 
//                 name="lastName"
//                 value={profileData.lastName}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="Last Name"
//                 className="border rounded-md p-2 w-full mb-2"
//               />
//               <input 
//                 name="phone"
//                 value={profileData.phone}
//                 onChange={handleChange}
//                 type="tel"
//                 placeholder="Phone"
//                 className="border rounded-md p-2 w-full mb-2"
//               />
//               <input 
//                 name="address"
//                 value={profileData.address}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="Address"
//                 className="border rounded-md p-2 w-full mb-4"
//               />
//             </div>
//           </div>
//           <button 
//             type="submit"
//             className="bg-blue-500 text-white py-2 px-4 rounded w-full hover:bg-blue-600 transition-colors"
//           >
//             Update Profile
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// }

// export default ProfileForm;



// trying new code 15th novermber
// import React, { useEffect, useState, useContext } from "react";
// import { MenuContext } from "../../context/MenuContext";
// import avatar from '../../assets/avatar.png';


// function ProfileForm({ onClose }) {
//   const { userProfile, updateUserProfile, error, success, getUserProfile, url } = useContext(MenuContext);

//   const [profileData, setProfileData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     address: "",
//   });
//   const [selectedImage, setSelectedImage] = useState(null);
//   const [previewImage, setPreviewImage] = useState(null);

//   // Fetch the user profile on component mount
//   useEffect(() => {
//     const fetchProfile = async () => {
//       await getUserProfile();
//     };
//     fetchProfile();
//   }, [getUserProfile]);

//   // Update profile data state when userProfile changes
//   useEffect(() => {
//     if (userProfile) {
//       setProfileData({
//         firstName: userProfile.firstName || "",
//         lastName: userProfile.lastName || "",
//         phone: userProfile.phone || "",
//         address: userProfile.address || "",
//       });
//       if (userProfile.image) {
//         setPreviewImage(`${url}/uploads/${userProfile.image}`);
//       }
//     }
//   }, [userProfile, url]);

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setProfileData((prevData) => ({ ...prevData, [name]: value }));
//   };

//   const handleImageChange = (e) => {
//     const file = e.target.files[0];
//     if (file) {
//       setSelectedImage(file);
//       setPreviewImage(URL.createObjectURL(file));
//     }
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (!profileData.firstName) {
//       alert("First Name is required.");
//       return;
//     }

//     const formData = new FormData();
//     formData.append("firstName", profileData.firstName);
//     formData.append("lastName", profileData.lastName);
//     formData.append("phone", profileData.phone);
//     formData.append("address", profileData.address);

//     if (selectedImage) {
//       formData.append("image", selectedImage);
//     }

//     try {
//       await updateUserProfile(formData);
//       await getUserProfile(); // Refetch the profile after updating
//       onClose(); // Close the profile form
//     } catch (err) {
//       console.error("Failed to update profile:", err);
//     }
//   };

//   return (
//     <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
//       <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md space-y-6 relative">
//         <button
//           onClick={onClose}
//           className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
//         >
//           <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
//             <line x1="18" y1="6" x2="6" y2="18" />
//             <line x1="6" y1="6" x2="18" y2="18" />
//           </svg>
//         </button>
//         <h2 className="text-2xl font-semibold text-gray-800">Profile</h2>
//         {error && <p className="text-red-600">{error}</p>}
//         {success && <p className="text-green-600">Profile updated successfully!</p>}
//         <form onSubmit={handleSubmit} className="space-y-4">
//           <div className="flex items-center gap-4">
//             <div className="relative">
//               <img
//                 src={previewImage || avatar} // Default avatar if no image
//                 alt="Profile"
//                 className="w-24 h-24 object-cover rounded-full border-2 border-gray-300"
//               />
//               <input
//                 type="file"
//                 accept="image/*"
//                 onChange={handleImageChange}
//                 id="profileImage"
//                 className="hidden"
//               />
//               <label
//                 htmlFor="profileImage"
//                 className="absolute bottom-0 right-0 bg-blue-500 text-white py-1 px-3 rounded-full text-xs cursor-pointer"
//               >
//                 Change
//               </label>
//             </div>
//             <div>
//               <input
//                 name="firstName"
//                 value={profileData.firstName}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="First Name"
//                 className="border rounded-md p-2 w-full mb-2"
//                 required
//               />
//               <input
//                 name="lastName"
//                 value={profileData.lastName}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="Last Name"
//                 className="border rounded-md p-2 w-full mb-2"
//               />
//               <input
//                 name="phone"
//                 value={profileData.phone}
//                 onChange={handleChange}
//                 type="tel"
//                 placeholder="Phone"
//                 className="border rounded-md p-2 w-full mb-2"
//               />
//               <input
//                 name="address"
//                 value={profileData.address}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="Address"
//                 className="border rounded-md p-2 w-full mb-4"
//               />
//             </div>
//           </div>
//           <button
//             type="submit"
//             className="bg-blue-500 text-white py-2 px-4 rounded w-full hover:bg-blue-600 transition-colors"
//           >
//             Update Profile
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// }

// export default ProfileForm;



    // update from perplexity 24 november
    // try {
    //   await updateUserProfile(formData); // Update the user profile
    //   const updatedProfile = await getUserProfile(); // Refetch the profile after updating
    //   setUserProfile(updatedProfile); // Update state with the new profile data
    //   setUserName(updatedProfile.name); // Assuming 'name' is the field for username
    //   onClose(); // Close the profile form after updating
    // } catch (error) {
    //   console.error('Failed to update profile:', error);
    // }

  

// updated 30th oct

import React, { useEffect, useState, useContext } from "react";
import { MenuContext } from "../../context/MenuContext";
import avatar from '../../assets/avatar.png';

function ProfileForm({ onClose }) {
  const { userProfile, updateUserProfile, error, success, getUserProfile, url } = useContext(MenuContext);
  
  const [profileData, setProfileData] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    address: '',
    image: '' 
  });
  const [selectedImage, setSelectedImage] = useState(null);

  // Fetch the user profile on component mount
  useEffect(() => {
    const fetchProfile = async () => {
      await getUserProfile();
    };
    fetchProfile();
  }, [getUserProfile]);

  // Update profile data state when userProfile changes
  useEffect(() => {
    if (userProfile) {
      setProfileData({
        firstName: userProfile.firstName || '',
        lastName: userProfile.lastName || '',
        phone: userProfile.phone || '',
        address: userProfile.address || '',
        image: userProfile.image || ''
      });
    }
  }, [userProfile]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setProfileData(prevData => ({ ...prevData, [name]: value }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setSelectedImage(file);

    // Create a URL for the selected image to preview it immediately
    const imageUrl = URL.createObjectURL(file);
    setProfileData(prevData => ({ ...prevData, image: imageUrl }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!profileData.firstName) {
      alert("Please fill out all required fields.");
      return;
    }

    const formData = new FormData();
    formData.append('firstName', profileData.firstName);
    formData.append('lastName', profileData.lastName);
    formData.append('phone', profileData.phone);
    formData.append('address', profileData.address);

    // Include selected image only if it exists
    if (selectedImage) {
      formData.append('image', selectedImage);
    }

    try {
      await updateUserProfile(formData);
      await getUserProfile(); // Refetch the profile after updating
      onClose(); // Close the profile form after updating
    } catch (error) {
      console.error('Failed to update profile:', error);
    }
  };
  
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
      <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md space-y-6 relative">
        <button 
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <h2 className="text-2xl font-semibold text-gray-800">Profile</h2>
        {error && <p className="text-red-600">{error}</p>}
        {success && <p className="text-green-600">Profile updated successfully!</p>}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="flex items-center gap-4">
            <div className="relative">
              <img 
                src={profileData.image ? profileData.image : `${url}/uploads/${profileData.image}`} 
                alt="Profile" 
                className="w-24 h-24 object-cover rounded-full border-2 border-gray-300"
              />
              <input 
                type="file" 
                accept="image/*" 
                onChange={handleImageChange}
                id="profileImage"
                className="absolute inset-0 opacity-0 cursor-pointer"
              />
              <label htmlFor="profileImage" className="absolute bottom-0 right-0 bg-blue-500 text-white py-1 px-3 rounded-full text-xs cursor-pointer">
                Change
              </label>
            </div>
            <div>
              <input 
                name="firstName"
                value={profileData.firstName}
                onChange={handleChange}
                type="text"
                placeholder="First Name"
                className="border rounded-md p-2 w-full mb-2"
                required
              />
              <input 
                name="lastName"
                value={profileData.lastName}
                onChange={handleChange}
                type="text"
                placeholder="Last Name"
                className="border rounded-md p-2 w-full mb-2"
              />
              <input 
                name="phone"
                value={profileData.phone}
                onChange={handleChange}
                type="tel"
                placeholder="Phone"
                className="border rounded-md p-2 w-full mb-2"
              />
              <input 
                name="address"
                value={profileData.address}
                onChange={handleChange}
                type="text"
                placeholder="Address"
                className="border rounded-md p-2 w-full mb-4"
              />
            </div>
          </div>
          <button 
            type="submit"
            className="bg-blue-500 text-white py-2 px-4 rounded w-full hover:bg-blue-600 transition-colors"
          >
            Update Profile
          </button>
        </form>
      </div>
    </div>
  );
}

export default ProfileForm;


// // working page 23 november
// import React, { useContext, useState, useEffect } from "react";
// import { MenuContext } from "../../context/MenuContext";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// function Checkout() {
//   const { cartItems, url } = useContext(MenuContext);
//   const navigate = useNavigate();
//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     address: "",
//   });
//   const [isLoading, setIsLoading] = useState(false);
//   const [error, setError] = useState(null);

//   // useEffect(() => {
//   //   console.log("Cart items in Checkout:", cartItems);
//   //   console.log("Checkout component state:", {formData, isLoading, error});
//   // }, [cartItems, formData, isLoading, error]);

//   const calculateTotalAmount = () => {
//     try {
//       if (!cartItems || !Array.isArray(cartItems.menus)) {
//         console.error("Invalid cartItems structure:", cartItems);
//         return "0.00";
//       }

//       let total = 0;
//       cartItems?.menus?.forEach((item) => {
//         const price = Number(item?.menu?.price || 0);
//         const quantity = Number(item?.quantity || 0);
//         total += price * quantity;
//         console.log("Item being processed:", item);
//       });

//       return total.toFixed(2);
//     } catch (error) {
//       console.error("Error calculating total amount:", error);
//       return "0.00";
//     }
//   };

//   const handleInputChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   const handleFormSubmit = async (e) => {
//     e.preventDefault();
//     setIsLoading(true);
//     setError(null);

//     console.log("Form submitted with data:", formData);
//     console.log("Cart items before submission:", cartItems);

//     const { firstName, lastName, phone, address, email } = formData;
//     const amount = calculateTotalAmount();
//     const currency = "NGN";

//     const payload = {
//       amount,
//       currency,
//       firstName,
//       lastName,
//       phone,
//       address,
//       email,
//       cart: cartItems,
//     };

//     // testing new payment link from perplexity 24 november
//     console.log("Sending payload to backend:", payload); 

//     try {
//       // Check if the cart is empty
//       if (!cartItems?.menus?.length) {
//         throw new Error("Your cart is empty.");
//       }
    
//       // Retrieve the authentication token
//       const token = localStorage.getItem("auth-token");
//       if (!token) {
//         throw new Error("You need to log in to proceed.");
//       }
//       // new 
//       const createPaymentLink = async (payload) => {
//         try {
//             const response = await axios.post(`${url}/api/payment/initiate`, payload, {
//                 headers: { Authorization: `Bearer ${token}` },
//             });
    
//             // Log the full response to debug
//             console.log("Full response from payment initiation API:", response.data);
    
//             // Inspect the full response to check the success condition
//             if (response.data && response.data.success) {
//                 const paymentLink = response.data.link;
//                 console.log("Payment link", paymentLink);
//                 window.location.href = paymentLink; // Redirect to Flutterwave payment page
//             } else {
//                 // Log response for better error handling
//                 console.error("Error response data:", response.data);
//                 throw new Error(response.data.error || "Failed to initiate payment.");
//             }
//         } catch (error) {
//             console.error("Error creating payment link:", error);
//             // Optional: Provide more specific error handling based on the error type
//             if (error.response) {
//                 console.error("API error response:", error.response.data);
//             } else {
//                 console.error("Unknown error:", error.message);
//             }
//             throw error; // Rethrow error for outer catch block or handle in UI
//         }
//         console.log("API URL:", url);
//         console.log("Authorization Token:", token);

//     };
    
    
//       // Call the createPaymentLink function with the payload
//       await createPaymentLink(payload);
    
//     } catch (error) {
//       console.error("Error initiating payment:", error.message);
//       setError(error.message); // Set error state for UI feedback
//     } finally {
//       setIsLoading(false); // Ensure loading state is reset
//     }

//   };

//   return (
//     <div className="bg-gray-100 min-h-screen p-4 md:p-8">
//       <div className="container mx-auto flex flex-col lg:flex-row gap-8">
//         {/* Order Summary Section */}
//         <div className="w-full lg:w-1/2 bg-white p-4 rounded-lg shadow-lg">
//           <h1 className="font-bold text-xl md:text-2xl mb-4">Order Summary</h1>
//           {!cartItems?.menus?.length ? (
//             <p>Your cart is empty</p>
//           ) : (
//             <>
//               {/* Desktop Table */}
//               <div className="hidden sm:block">
//                 <table className="w-full mb-4">
//                   <thead>
//                     <tr className="border-b font-semibold">
//                       <th className="py-2">Item</th>
//                       <th className="py-2">Image</th>
//                       <th className="py-2">Price</th>
//                       <th className="py-2">Quantity</th>
//                       <th className="py-2">Amount</th>
//                     </tr>
//                   </thead>
//                   <tbody>
//                     {cartItems.menus.map((item, index) => {
//                       const name = item?.menu?.name || "Unknown";
//                       const price = Number(item?.menu?.price || 0);
//                       const quantity = Number(item?.quantity || 0);
//                       const imgSrc = item?.menu?.img
//                         ? `${url}/uploads/${item?.menu?.img}`
//                         : "default_image_url";
//                       const total = price * quantity;

//                       return (
//                         <tr key={index} className="border-b text-center">
//                           <td className="py-2">{name}</td>
//                           <td className="py-2">
//                             <img
//                               src={imgSrc}
//                               alt={name}
//                               className="h-12 md:h-16 object-cover"
//                             />
//                           </td>
//                           <td className="py-2">₦{price.toFixed(2)}</td>
//                           <td className="py-2">{quantity}</td>
//                           <td className="py-2">₦{total.toFixed(2)}</td>
//                         </tr>
//                       );
//                     })}
//                   </tbody>
//                 </table>
//                 <div className="font-bold text-xl">
//                   <h1>Total = ₦{calculateTotalAmount()}</h1>
//                 </div>
//               </div>

//               {/* Mobile View */}
//               <div className="block sm:hidden">
//                 {cartItems?.menus?.map((item, index) => {
//                   const name = item?.menu?.name || "Unknown";
//                   const price = Number(item?.menu?.price || 0);
//                   const quantity = Number(item?.quantity || 0);
//                   const imgSrc = item.menu?.img
//                     ? `${url}/uploads/${item.menu.img}`
//                     : "default_image_url";
//                   const total = price * quantity;

//                   return (
//                     <div key={index} className="bg-white shadow-md rounded-lg mb-4 p-4">
//                       <div className="flex items-center">
//                         <img
//                           src={imgSrc}
//                           alt={name}
//                           className="h-16 w-16 object-cover rounded"
//                         />
//                         <div className="ml-4">
//                           <h2 className="font-semibold text-lg">{name}</h2>
//                           <p>₦{price.toFixed(2)}</p>
//                           <p>Quantity: {quantity}</p>
//                           <p>Total: ₦{total.toFixed(2)}</p>
//                         </div>
//                       </div>
//                     </div>
//                   );
//                 })}
//                 <div className="font-bold text-xl text-center">
//                   <h1>Total = ₦{calculateTotalAmount()}</h1>
//                 </div>
//               </div>
//             </>
//           )}
//         </div>

//         {/* Delivery Information Section */}
//         <div className="w-full lg:w-1/2 bg-white p-4 rounded-lg shadow-lg">
//           <h1 className="mb-4 font-bold text-xl md:text-2xl text-center">Delivery Information</h1>
//           {error && <p className="text-red-500 mb-4">{error}</p>}
//           <form onSubmit={handleFormSubmit}>
//             {["firstName", "lastName", "phone", "email", "address"].map((field) => (
//               <div className="flex flex-col gap-4 mb-4" key={field}>
//                 <label className="font-semibold capitalize" htmlFor={field}>
//                   {field.replace(/([A-Z])/g, " $1")}
//                 </label>
//                 <input
//                   className="border border-gray-300 p-2 rounded-md"
//                   type={field === "address" ? "textarea" : "text"}
//                   name={field}
//                   value={formData[field]}
//                   onChange={handleInputChange}
//                   required
//                 />
//               </div>
//             ))}
//             <button
//               type="submit"
//               className="bg-black text-white py-2 px-4 rounded-md hover:bg-orange-500 transition-colors duration-300 w-full"
//               disabled={isLoading || !cartItems?.menus?.length}
//             >
//               {isLoading ? "Processing..." : "Pay Now"}
//             </button>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// }

// export default Checkout;



// // new code 15 november
// import React, { useContext, useEffect } from "react";
// import { MdDelete, MdAdd, MdRemove } from "react-icons/md";
// import { Link } from "react-router-dom";
// import { MenuContext } from "../../context/MenuContext";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";

// function Cart() {
//     // zainab suggestion
//     const cart = JSON.parse(localStorage.getItem("cart"));
//   const {
//     cartItems,
//     removeCartItems,
//     updateCartItems,
//     fetchCartData,
//     url,
//   } = useContext(MenuContext);

//   useEffect(() => {
//     fetchCartData()
//   }, [cartItems])



//   // Updated totalCartAmount function to handle undefined cartItems.products
//   const totalCartAmount = () => {
//     let totalAmount = 0;
//     if (cartItems && cartItems.menus && Array.isArray(cartItems.menus)) {
//       cartItems.menus.forEach((item) => {
//         if (item.menu && item.menu.price && item.quantity) {
//           totalAmount += item.menu.price * item.quantity;
//         }
//       });
//     }
//     return totalAmount.toFixed(2);
//   };

//   // just now to check if it wil count and add to cart
//   // const totalCartCount = () => {
//   //   // Safely handle cases where cartItems or cartItems.menus may be undefined
//   //   if (cartItems && Array.isArray(cartItems.products)) {
//   //     return cartItems.products.reduce((total, item) => total + (item.quantity || 0), 0);
//   //   }
//   //   return 0;
//   // };


//   const handleAddItem = (itemId) => {
//     updateCartItems(itemId, 1);
//     toast.success("Item added to cart");
//   };

//   const handleRemoveItem = (itemId) => {
//     removeCartItems(itemId);
//     toast.error("Item removed from cart");
//   };

//   const handleReduceItem = (itemId) => {
//     updateCartItems(itemId, -1);
//     toast.info("Item quantity reduced");
//   };
  
//   return (
//     <div className="bg-purple-100 py-10">
//       <h1 className="text-3xl font-bold text-center mb-8">Your Shop Cart</h1>
//       {(!cartItems || !cartItems.menus || cartItems.menus.length === 0) ? (
//         <p className="text-center text-lg">Your cart is empty</p>
//       ) : (
//         <>
       
//           <div className="overflow-x-auto">
//             <table className="w-full bg-white shadow-md rounded-lg hidden sm:table">
//               <thead className="bg-purple-200">
//                 <tr className="text-left">
//                   <th className="py-3 px-2 text-center sm:px-4">Action</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Item</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Image</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Price</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Quantity</th>
//                   <th className="py-3 px-2 text-center sm:px-4">Amount</th>
//                 </tr>
//               </thead>
//               <tbody className="text-center">
//                 {cartItems.menus?.map((item, index) => (
//                   <tr key={index} className="border-b">
//                     <td className="flex justify-center items-center space-x-2 py-2 px-2 sm:px-4">
//                       <button
//                         onClick={() => handleReduceItem(item.menu._id)}
//                         className="p-2 text-blue-500 hover:bg-blue-100 rounded"
//                       >
//                         <MdRemove />
//                       </button>
//                       <button
//                         onClick={() => handleAddItem(item.menu._id)}
//                         className="p-2 text-green-500 hover:bg-green-100 rounded"
//                       >
//                         <MdAdd />
//                       </button>
//                       <button
//                         onClick={() => handleRemoveItem(item.menu._id)}
//                         className="p-2 text-orange-500 hover:bg-orange-100 rounded"
//                       >
//                         <MdDelete />
//                       </button>
//                     </td>
//                     <td className="py-2 px-2 sm:px-4">{item.menu.name}</td>
//                     <td className="py-2 px-2 sm:px-4">
//                       <div className="flex justify-center">
//                         <img
                       
//                         // http://food-project-api.onrender.com/uploads
//                           src={item.menu?.img ? ` https://food-project-api.onrender.com/uploads/${item.menu.img}` : "default_image_url"}
//                           className="h-12 w-12 object-cover rounded"
//                           alt={item.name}
//                         />
//                       </div>
//                     </td>
//                     <td className="py-2 px-2 sm:px-4">₦{item.menu.price ? item.menu.price.toFixed(2) : '0.00'}</td>
//                     <td className="py-2 px-2 sm:px-4">{item.quantity || 0}</td>
//                     <td className="py-2 px-2 sm:px-4">
//                       ₦{item.menu.price && item.quantity ? (item.menu.price * item.quantity).toFixed(2) : '0.00'}
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>

//             {/* Mobile View */}
//             <div className="block sm:hidden">
//               {cartItems.menus?.map((item, index) => (
//                 <div key={index} className="bg-white shadow-md rounded-lg mb-4 p-4">
//                   <div className="flex items-center justify-between mb-2">
//                     <img
//                       src={item.menu?.img ? `${url}/uploads/${item.menu.img}` : "default_image_url"}
//                       className="h-12 w-12 object-cover rounded"
//                       alt={item.name}
//                     />
//                     <div className="flex space-x-2">
//                       <button
//                         onClick={() => handleReduceItem(item.menu._id)}
//                         className="p-2 text-blue-500 hover:bg-blue-100 rounded"
//                       >
//                         <MdRemove />
//                       </button>
//                       <button
//                         onClick={() => handleAddItem(item.menu._id)}
//                         className="p-2 text-green-500 hover:bg-green-100 rounded"
//                       >
//                         <MdAdd />
//                       </button>
//                       <button
//                         onClick={() => handleRemoveItem(item.menu._id)}
//                         className="p-2 text-orange-500 hover:bg-orange-100 rounded"
//                       >
//                         <MdDelete />
//                       </button>
//                     </div>
//                   </div>
//                   <div className="text-center mb-2">
//                     <h2 className="font-semibold text-lg">{item.menu.name}</h2>
//                     <p>₦{item.menu.price ? item.menu.price.toFixed(2) : '0.00'}</p>
//                     <p>Quantity: {item.quantity || 0}</p>
//                     <p>Total: ₦{item.menu.price && item.quantity ? (item.menu.price * item.quantity).toFixed(2) : '0.00'}</p>
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>

//           <div className="mt-6 px-4">
//             <div className="flex justify-between items-center">
//               <p className="text-lg font-semibold">
//                 <b>Total Amount:</b> ₦{totalCartAmount()}
//                 {/* <p className="text-center text-lg">Total Items in Cart: {totalCartAmount()}</p> */}
//               </p>
//               <Link
//                 to="/checkout"
//                 className="bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded"
//               >
//                 Checkout
//               </Link>
//             </div>
//           </div>
//         </>
//       )}
//     </div>
//   );
// }

// export default Cart;




// // updated 30th oct

// import React, { useEffect, useState, useContext } from "react";
// import { MenuContext } from "../../context/MenuContext";
// import avatar from '../../assets/avatar.png';

// function ProfileForm({ onClose }) {
//   const { userProfile, updateUserProfile, error, success, getUserProfile, url } = useContext(MenuContext);
  
//   const [profileData, setProfileData] = useState({
//     firstName: '',
//     lastName: '',
//     phone: '',
//     address: '',
//     image: '' 
//   });
//   const [selectedImage, setSelectedImage] = useState(null);

//   // Fetch the user profile on component mount
//   useEffect(() => {
//     const fetchProfile = async () => {
//       await getUserProfile();
//     };
//     fetchProfile();
//   }, [getUserProfile]);

//   // Update profile data state when userProfile changes
//   useEffect(() => {
//     if (userProfile) {
//       setProfileData({
//         firstName: userProfile.firstName || '',
//         lastName: userProfile.lastName || '',
//         phone: userProfile.phone || '',
//         address: userProfile.address || '',
//         image: userProfile.image || ''
//       });
//     }
//   }, [userProfile]);

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setProfileData(prevData => ({ ...prevData, [name]: value }));
//   };

//   const handleImageChange = (e) => {
//     const file = e.target.files[0];
//     setSelectedImage(file);

//     // Create a URL for the selected image to preview it immediately
//     const imageUrl = URL.createObjectURL(file);
//     setProfileData(prevData => ({ ...prevData, image: imageUrl }));
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (!profileData.firstName) {
//       alert("Please fill out all required fields.");
//       return;
//     }

//     const formData = new FormData();
//     formData.append('firstName', profileData.firstName);
//     formData.append('lastName', profileData.lastName);
//     formData.append('phone', profileData.phone);
//     formData.append('address', profileData.address);

//     // Include selected image only if it exists
//     if (selectedImage) {
//       formData.append('image', selectedImage);
//     }

//     try {
//       await updateUserProfile(formData);
//       await getUserProfile(); // Refetch the profile after updating
//       onClose(); // Close the profile form after updating
//     } catch (error) {
//       console.error('Failed to update profile:', error);
//     }
//   };
  
//   return (
//     <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
//       <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md space-y-6 relative">
//         <button 
//           onClick={onClose}
//           className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
//         >
//           <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
//             <line x1="18" y1="6" x2="6" y2="18" />
//             <line x1="6" y1="6" x2="18" y2="18" />
//           </svg>
//         </button>
//         <h2 className="text-2xl font-semibold text-gray-800">Profile</h2>
//         {error && <p className="text-red-600">{error}</p>}
//         {success && <p className="text-green-600">Profile updated successfully!</p>}
//         <form onSubmit={handleSubmit} className="space-y-4">
//           <div className="flex items-center gap-4">
//             <div className="relative">
//               <img 
//                 src={profileData.image ? profileData.image : `${url}/uploads/${profileData.image}`} 
//                 alt="Profile" 
//                 className="w-24 h-24 object-cover rounded-full border-2 border-gray-300"
//               />
//               <input 
//                 type="file" 
//                 accept="image/*" 
//                 onChange={handleImageChange}
//                 id="profileImage"
//                 className="absolute inset-0 opacity-0 cursor-pointer"
//               />
//               <label htmlFor="profileImage" className="absolute bottom-0 right-0 bg-blue-500 text-white py-1 px-3 rounded-full text-xs cursor-pointer">
//                 Change
//               </label>
//             </div>
//             <div>
//               <input 
//                 name="firstName"
//                 value={profileData.firstName}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="First Name"
//                 className="border rounded-md p-2 w-full mb-2"
//                 required
//               />
//               <input 
//                 name="lastName"
//                 value={profileData.lastName}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="Last Name"
//                 className="border rounded-md p-2 w-full mb-2"
//               />
//               <input 
//                 name="phone"
//                 value={profileData.phone}
//                 onChange={handleChange}
//                 type="tel"
//                 placeholder="Phone"
//                 className="border rounded-md p-2 w-full mb-2"
//               />
//               <input 
//                 name="address"
//                 value={profileData.address}
//                 onChange={handleChange}
//                 type="text"
//                 placeholder="Address"
//                 className="border rounded-md p-2 w-full mb-4"
//               />
//             </div>
//           </div>
//           <button 
//             type="submit"
//             className="bg-blue-500 text-white py-2 px-4 rounded w-full hover:bg-blue-600 transition-colors"
//           >
//             Update Profile
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// }

// export default ProfileForm;



// // signin and login working with spinner but showing the username on the header 
// import React, { useState, useContext } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";
// import { LiaEyeSolid, LiaEyeSlashSolid } from "react-icons/lia";
// import { MenuContext } from "../../context/MenuContext";
// import AuthContext from "../../context/AuthContext";

// function SignupLogin({ onClose }) {
//   const navigate = useNavigate();
//   const [ state, dispatch ] = useContext(AuthContext)
//   const { handleUserLogin, getUserProfile, fetchCartData, setCartItems } = useContext(MenuContext);
  
//   const [url] = useState("http://localhost:3000");
//     // const [url] = useState("https://food-project-api.onrender.com");
  
//   const [signupData, setSignupData] = useState({
//     firstName: "",
//     lastName: "",
//     email: "",
//     password: "",
//     confirmPassword: "",
//     phone: "",
//     street: "",
//     city: "",
//     country: "",
//   });

//   const [loginData, setLoginData] = useState({
//     email: "",
//     password: "",
//   });

//   const [showLoginForm, setShowLoginForm] = useState(false);
//   const [showSignupPassword, setShowSignupPassword] = useState(false);
//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);
//   const [showLoginPassword, setShowLoginPassword] = useState(false);
//   const [passwordError, setPasswordError] = useState("");
//   const [isLoading, setIsLoading] = useState(false); // New loading state

//   // Validate password length
//   const validatePassword = (password) => {
//     if (password.length < 8) {
//       setPasswordError("Password must be at least 8 characters long");
//     } else {
//       setPasswordError("");
//     }
//   };

//   const handleSignupChange = (e) => {
//     const { name, value } = e.target;
//     setSignupData((prev) => ({ ...prev, [name]: value }));

//     if (name === "password") {
//       validatePassword(value);
//     }
//   };

//   const handleLoginChange = (e) => {
//     const { name, value } = e.target;
//     setLoginData((prevData) => ({ ...prevData, [name]: value }));
//   };

//   const handleError = (error) => {
//     console.error("Error:", error.response ? error.response.data : error.message);
//     toast.error(error.response?.data?.message || "An error occurred");
//   };

//   const handleSignupSubmit = async (e) => {
//     e.preventDefault();
//     if (signupData.password !== signupData.confirmPassword) {
//       return toast.error("Passwords do not match");
//     }
//     if (passwordError) {
//       return toast.error(passwordError);
//     }

//     setIsLoading(true); // Start loading

//     try {
//       const response = await axios.post(`${url}/api/user/register`, signupData);
//       if (response.status === 200 && response.data.success) {
//         setShowLoginForm(true);
//         toast.success("Successfully Registered");
//       } else {
//         toast.error(response.data.message || "Registration failed");
//         localStorage.setItem("auth-token", response.data.token);
//         localStorage.setItem("user", JSON.stringify(response.data.user));

//         //Dispatch user data to context
//         dispatch({ type: "setToken", payload: response.data.token });

//         //Handle any cart data if available
//         const cartDataItem = JSON.parse(localStorage.getItem("cartItems"));
//         if (cartDataItem) {
//           console.log("request made");
//           await Promise.all(cartDataItem?.menus?.map(async (item) => {
            
           
//             // https://food-project-api.onrender.com/api/add-to-cart
//             // const response = await fetch("http://food-project-api.onrender.com/api/add-to-cart",
//             const cartresponse = await fetch("https://food-project-api.onrender.com/add-to-cart", {
//               method: "POST",
//               headers: {
//                 "Authorization": `Bearer ${getItem("auth-token")}`,  // Use the token directly
//                 "Content-Type": "application/json",
//               },
//               body: JSON.stringify({ productId: item.menu._id, quantity: item.quantity }),
//             });

//             const cartdata = await cartresponse.json();
//             // console.log( "todday", cartdata);
//             if (response.ok) {
//               setCartItems(cartdata && cartdata.menus);
//               fetchCartData();
//               showHide("success", "added to cart successfully")
//             } else {
//               // console.error(Failed to add items to the backend cart);
//             }
//           }));
//           deleteItem("cart");
//         }

//         // Update context with user data and redirect
//         await getUserProfile(); // Fetch updated user profile on login
//         navigate("/");
//         window.location.reload()
//         console.log("success", "You are now logged in");
//       }
//     } catch (error) {
//       handleError(error);
//     } finally {
//       setIsLoading(false); // Stop loading
//     }
//   };

//   const handleLoginSubmit = async (e) => {
//     e.preventDefault();

//      const { email, password } = loginData;
//      if (!email || !password) {
//       console.log("error", "Email and Password are required");
//       return;
//      }

//     try {
//       const response = await axios.post(`${url}/api/user/login`, loginData);
//       console.log(response);
      
//       if (response.data.success) {
//         const cartDataItem = JSON.parse(localStorage.getItem("cartItems"));
//         console.log("localstorage cart", cartDataItem)
//         toast.success("Logged In Successfully");
//         localStorage.setItem("auth-token", response.data.token);
//         if(cartDataItem){
//           await Promise.all(cartDataItem?.menus?.map(async (item) => {
            
//             // https://food-project-api.onrender.com/api/add-to-cart
//             const CartResponse = await fetch("https://food-project-api.onrender.com/api/add-to-cart", {
//               method: "POST",
//               headers: {
//                 "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Use the token directly
//                 "Content-Type": "application/json",
//               },
//               body: JSON.stringify({ productId: item.menu._id, quantity: item.quantity }),
//             });
  
//             const cartdata = await CartResponse.json();
//             console.log(cartdata.data, "Login cart")
//             if (CartResponse.ok) {
//               setCartItems(cartdata && cartdata.data)
//               await fetchCartData();
//               toast.success("added to cart successfully")
//             } else {
//               console.error("Failed to add items to the backend cart");
//             }
//           }));
//         }

//         localStorage.removeItem("cartItems")
//         localStorage.setItem("user", JSON.stringify(response.data.user));
//         handleUserLogin(response.data.token, response.data.user);
       
//         getUserProfile();
//         onClose();
//         navigate("/", { replace: true });
//       } else {
//         toast.error("Invalid Credentials");
//         localStorage.setItem('user', JSON.stringify(userData)); // where userData is the new user object

//       }
//     } catch (error) {
//       handleError(error);
//     }
//   };

//   const toggleLoginForm = () => {
//     setShowLoginForm(!showLoginForm);
//   };

//   return (
//     <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md relative max-h-[90vh] overflow-y-auto">
//       <button
//         className="absolute top-2 right-2 bg-gray-200 text-gray-700 rounded-full p-2"
//         onClick={onClose}
//       >
//         &times;
//       </button>
//       {showLoginForm ? (
//         <form onSubmit={handleLoginSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Login</h2>
//           <div className="space-y-4">
//             <input
//               type="email"
//               name="email"
//               value={loginData.email}
//               onChange={handleLoginChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showLoginPassword ? "text" : "password"}
//                 name="password"
//                 value={loginData.password}
//                 onChange={handleLoginChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowLoginPassword(!showLoginPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showLoginPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full"
//           >
//             Login
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Don't have an account yet? Sign up here.
//           </p>
//         </form>
//       ) : (
//         <form onSubmit={handleSignupSubmit}>
//           <h2 className="text-xl font-semibold mb-4">Sign Up</h2>
//           <div className="space-y-4">
//             <input
//               type="text"
//               name="firstName"
//               value={signupData.firstName}
//               onChange={handleSignupChange}
//               placeholder="First Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="lastName"
//               value={signupData.lastName}
//               onChange={handleSignupChange}
//               placeholder="Last Name"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="email"
//               name="email"
//               value={signupData.email}
//               onChange={handleSignupChange}
//               placeholder="Email"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <div className="relative">
//               <input
//                 type={showSignupPassword ? "text" : "password"}
//                 name="password"
//                 value={signupData.password}
//                 onChange={handleSignupChange}
//                 placeholder="Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowSignupPassword(!showSignupPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showSignupPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             <div className="relative">
//               <input
//                 type={showConfirmPassword ? "text" : "password"}
//                 name="confirmPassword"
//                 value={signupData.confirmPassword}
//                 onChange={handleSignupChange}
//                 placeholder="Confirm Password"
//                 className="border rounded-md p-2 w-full"
//                 required
//               />
//               <button
//                 type="button"
//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}
//                 className="absolute right-2 top-1/2 transform -translate-y-1/2"
//               >
//                 {showConfirmPassword ? <LiaEyeSolid size={20} /> : <LiaEyeSlashSolid size={20} />}
//               </button>
//             </div>
//             {passwordError && (
//               <p className="text-red-500 text-sm">{passwordError}</p>
//             )}
//             <input
//               type="tel"
//               name="phone"
//               value={signupData.phone}
//               onChange={handleSignupChange}
//               placeholder="Phone"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="street"
//               value={signupData.street}
//               onChange={handleSignupChange}
//               placeholder="Street"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="city"
//               value={signupData.city}
//               onChange={handleSignupChange}
//               placeholder="City"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//             <input
//               type="text"
//               name="country"
//               value={signupData.country}
//               onChange={handleSignupChange}
//               placeholder="Country"
//               className="border rounded-md p-2 w-full"
//               required
//             />
//           </div>
//           <button
//             type="submit"
//             className="bg-green-500 text-white py-2 px-4 mt-4 rounded w-full flex items-center justify-center"
//           >
//             {isLoading ? (
//               <span className="loader"></span>
//             ) : (
//               "Sign Up"
//             )}
//           </button>
//           <p
//             className="mt-2 text-sm text-gray-500 cursor-pointer text-center"
//             onClick={toggleLoginForm}
//           >
//             Already have an account? Login here.
//           </p>
//         </form>
//       )}
//     </div>
//   );
// }

// export default SignupLogin;



// // 30th jan 2025
// import { useContext, useEffect, useState } from "react";
// import { useSearchParams } from "react-router-dom";
// import { MenuContext } from "../../context/MenuContext";

// const Thanks = () => {
//   const { createOrder, order, clearCart } = useContext(MenuContext); // Assuming clearCart is a function to reset the cart
//   const [searchParams] = useSearchParams();
//   const tx_ref = searchParams.get("tx_ref");
//   const transaction_id = searchParams.get("transaction_id");

//   const [loading, setLoading] = useState(true); // To handle loading state
//   const [error, setError] = useState(""); // To store error messages

//   useEffect(() => {
//     if (transaction_id && tx_ref) {
//       // Attempt to create the order
//       createOrder(transaction_id, tx_ref)
//         .then((response) => {
//           if (response.success) {
//             // Clear the cart after successful order
//             clearCart();
//             setLoading(false); // Stop loading once the order is created successfully
//           } else {
//             // Set error message if order creation fails
//             setError("An error occurred while processing your order.");
//             setLoading(false);
//           }
//         })
//         .catch((err) => {
//           console.error("Error creating order:", err);
//           setError("An error occurred while processing your order.");
//           setLoading(false);
//         });
//     }
//   }, [transaction_id, tx_ref, createOrder, clearCart]);

//   if (loading) {
//     return (
//       <div className="loading-spinner">
//         <p>Loading...</p>
//       </div>
//     ); // Display loading state while waiting for the order to complete
//   }

//   return (
//     <div className="thanks-content">
//       {error && (
//         <div className="error-message">
//           <p>{error}</p>
//         </div>
//       )}
//       <div className="mt-10 flex justify-center">
//         <video
//           className=" w-[60vw] h-[60vh] rounded-full"
//           src="/thanks-vid.mp4"
//           loop
//           autoPlay
//           muted
//           controls
//         ></video>
//       </div>
//       <p className="text-center font-bold text-2xl mt-3">
//         We appreciate your feedback. Have a great day!
//       </p>
//       {order && (
//         <div className="font-bold text-2xl">
//           <div className="receipt bg-gray-100 shadow-md rounded-lg p-6 mt-8 mx-auto w-full max-w-md">
//             <h2 className="text-xl font-semibold text-center mb-4 text-indigo-600">
//               Payment Receipt
//             </h2>
//             <div className="flex flex-col gap-4">
//               <div className="flex justify-between">
//                 <span className="font-medium">First Name: {order.firstName}</span>
//               </div>
//               <div className="flex justify-between">
//                 <span className="font-medium">Last Name: {order.lastName}</span>
//               </div>
//               <div className="flex justify-between">
//                 <span className="font-medium">Total Amount: {order.amount}</span>
//               </div>
//               <div className="flex justify-between">
//                 <span className="font-medium">Date:</span>
//                 <span className="">
//                   {order.date
//                     ? new Date(order.date).toLocaleString("en-GB", {
//                         day: "numeric",
//                         month: "long",
//                         year: "numeric",
//                       })
//                     : ""}
//                 </span>
//               </div>
//             </div>
//             <div className="listing">
//               <h2 className="mt-5 capitalize mb-2">Purchased Items</h2>
//               {order?.menus?.map((items) => (
//                 <ul key={items?.menu?.id}>
//                   <li className="p-2 font-serif mb-2 font-normal text-xl capitalize hover:bg-slate-300 bg-slate-200">
//                     {items?.menu?.name} &nbsp; -- {items?.quantity} -- &nbsp;
//                     {items?.menu?.price}
//                   </li>
//                 </ul>
//               ))}
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Thanks;

// import { useContext, useEffect, useState } from "react";
// import { useSearchParams } from "react-router-dom";
// import { MenuContext } from "../../context/MenuContext";

// const Thanks = () => {
//   const { createOrder, order } = useContext(MenuContext);
//   const [searchParams] = useSearchParams();
//   const [status, setStatus] = useState("processing");
//   const [error, setError] = useState(null);
//   const [orderProcessed, setOrderProcessed] = useState(false);

//   useEffect(() => {
//     const transaction_id = searchParams.get("transaction_id");
//     const tx_ref = searchParams.get("tx_ref");

//     if (!transaction_id || !tx_ref) {
//       setError("Invalid payment verification parameters");
//       setStatus("failed");
//       return;
//     }

//     // Check if we've already processed this order
//     if (orderProcessed || order?.transactionId === transaction_id) {
//       setStatus("completed");
//       return;
//     }

//     const verifyPayment = async () => {
//       try {
//         setStatus("processing");
//         await createOrder(transaction_id, tx_ref);
//         setOrderProcessed(true);
//         setStatus("completed");
//       } catch (err) {
//         console.error("Payment verification error:", err);
//         // setError(err.message || "Payment verification failed");
//         // setStatus("failed");
//       }
//     };

//     verifyPayment();
//   }, [searchParams, createOrder, orderProcessed, order]);

//   return (
//     <div className="container mx-auto p-4">
//       {status === "processing" && (
//         <div className="text-center py-8">
//           <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
//           <p>Verifying your payment...</p>
//         </div>
//       )}

//       {status === "completed" && (
//         <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
//           <h1 className="text-2xl font-bold text-green-600 mb-4">Payment Successful!</h1>
//           <p className="mb-4">Thank you for your order. Here are your details:</p>
          
//           <div className="mb-4">
//             <h2 className="font-semibold">Order Summary</h2>
//             <p>Order ID: {order?.orderId}</p>
//             <p>Amount: ₦{order?.amount?.toFixed(2)}</p>
//           </div>

//           <div className="mb-4">
//             <h2 className="font-semibold">Delivery Information</h2>
//             <p>{order?.firstName} {order?.lastName}</p>
//             <p>{order?.address}</p>
//             <p>{order?.phone}</p>
//           </div>

//           <div>
//             <h2 className="font-semibold">Items Ordered</h2>
//             <ul className="list-disc pl-5">
//               {console.log("order", order)}
//               {order?.menus?.map((item, index) => (
//                 <li key={index}>
//                   {item?.quantity}x {item?.menu?.name} - ₦{(item?.menu?.price * item?.quantity).toFixed(2)}
//                 </li>
//               ))}
//             </ul>
//           </div>
//         </div>
//       )}

//       {status === "failed" && (
//         <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md text-center">
//           <h1 className="text-2xl font-bold text-red-600 mb-4">Payment Verification Failed</h1>
//           <p className="mb-4">{error || "There was an issue verifying your payment."}</p>
//           <p>Please contact support with your transaction reference: {searchParams.get("tx_ref")}</p>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Thanks;
