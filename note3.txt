//testimg updated code 18th november testing new 21 november
// const addToCart = async (productId, quantity, product) => {
//   if (isAuthenticated) {
//     // Handle authenticated user's cart
//     try {
//       // const token = localStorage.getItem("token");
//       // if (!token) {
//       //   console.error("User token is missing. Please log in.");
//       //   return;
//       // }

//       const res = await fetch("http://food-project-api.onrender.com/api/add-to-cart", {
//         method: "POST",
//         headers: {
//           "Authorization": `Bearer ${localStorage.getItem("auth-token")}`,
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ productId, quantity }),
//       });

//       console.log("Request Payload:", { productId, quantity });

//       console.log("res", res)
//       const data = await res.json();
//       console.log("Server Response", data)

//       if (res.ok) {
//         // Clear localStorage cart for authenticated users
//         localStorage.removeItem("cartItems");
//         localStorage.setItem("cartItems", JSON.stringify(data)); // Persist the updated cart
//         setCartItems(data); // Update state with server response
//         toast("success", "You have successfully added the item to the cart");
//       } else {
//         console.error("Failed to add product to cart:", data.message || "Unknown error");
//         toast("error", data.message || "Failed to add product to cart");
//       }
//     } catch (error) {
//       console.error("Error adding product to cart:", error);
//       toast("error", "An error occurred while adding the item to the cart.");
//     }
//   } else {
//     // Handle unauthenticated user's cart using localStorage
//     try {
//       const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };

//       if (!Array.isArray(storedCart.products)) {
//         storedCart.products = [];
//       }

//       // Check if the product already exists in the cart
//       const itemIndex = storedCart.products.findIndex((item) => item.product._id === productId);

//       if (itemIndex >= 0) {
//         // If the product exists, update the quantity and amount
//         storedCart.products[itemIndex].quantity += quantity;
//         storedCart.products[itemIndex].amount =
//           product.price * storedCart.products[itemIndex].quantity;
//       } else {
//         if (!product) {
//           throw new Error("Product details are missing. Ensure the correct product is being added.");
//         }

//         // Add new product to the cart
//         storedCart.products.push({
//           product,
//           quantity,
//           amount: product.price * quantity,
//         });
//       }

//       // Update localStorage and UI
//       localStorage.setItem("cartItems", JSON.stringify(storedCart));
//       setCartItems(storedCart.products); // Update state for UI
//       toast("success", "Item added to cart");
//     } catch (error) {
//       console.error("Error adding to localStorage cart:", error);
//       toast("error", "Failed to add the item to the cart.");
//     }
//   }
// };


// const totalCartCount = () => {
//   return cartItems.products.reduce((total, item) => total + (item.quantity || 0), 0);
// };


//trying new 21 november
// const addToCart = async (productId, quantity, product) => {
//   if (isAuthenticated) {
//     // Handle authenticated user's cart logic here...
//     // (your server sync logic as we discussed earlier)
//   } else {
//     try {
//       // Get the existing cart or initialize it
//       const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };

//       // Ensure products is an array
//       if (!Array.isArray(storedCart.products)) {
//         storedCart.products = [];
//       }

//       // Find the product in the cart
//       const itemIndex = storedCart.products.findIndex(
//         (item) => item.product._id === productId
//       );

//       if (itemIndex >= 0) {
//         // Update quantity if product exists in the cart
//         storedCart.products[itemIndex].quantity += quantity;
//         storedCart.products[itemIndex].amount =
//           product.price * storedCart.products[itemIndex].quantity;
//       } else {
//         // Add new product to the cart
//         if (!product) {
//           throw new Error("Product details are missing. Please provide the correct product.");
//         }

        

//         storedCart.products.push({
//           product,
//           quantity,
//           amount: product.price * quantity,
//         });
//       }

//       // Update localStorage and state
//       localStorage.setItem("cartItems", JSON.stringify(storedCart));
//       setCartItems(storedCart.products); // Update state for UI
     

//       toast("success", "Item added to cart");
//     } catch (error) {
//       console.error("Error adding to cart (localStorage):", error);
//       toast("error", "Failed to add the item to the cart.");
//     }
//   }
// };


// just now to check if it will count and add to cart
// const addToCart = async (productId, quantity, product) => {
//   if (isAuthenticated) {
//     // Handle authenticated user's cart logic here (e.g., server sync)
//   } else {
//     try {
//       // Get the existing cart or initialize it
//       const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };

//       // Ensure products is an array
//       if (!Array.isArray(storedCart.products)) {
//         storedCart.products = [];
//       }

//       // Find the product in the cart
//       const itemIndex = storedCart.products.findIndex(
//         (item) => item.product._id === productId
//       );

//       if (itemIndex >= 0) {
//         // Update quantity if product exists in the cart
//         storedCart.products[itemIndex].quantity += quantity;
//         storedCart.products[itemIndex].amount =
//           product.price * storedCart.products[itemIndex].quantity;
//       } else {
//         // Add new product to the cart
//         if (!product) {
//           throw new Error("Product details are missing. Please provide the correct product.");
//         }

//         storedCart.products.push({
//           product,
//           quantity,
//           amount: product.price * quantity,
//         });
//       }

//       // Update localStorage and state
//       localStorage.setItem("cartItems", JSON.stringify(storedCart));
//       setCartItems(storedCart); // Set the entire cart object, not just products

//       toast("success", "Item added to cart");
//     } catch (error) {
//       console.error("Error adding to cart (localStorage):", error);
//       toast("error", "Failed to add the item to the cart.");
//     }
//   }
// };



//  testing guest and authenticated user 22 november
// const addToCart = async (productId, quantity, product) => {
//     console.log("addToCart called with:", { productId, quantity, product });
//     // Rest of your function logic
  
//   if (isAuthenticated) {
//     // Handle authenticated user's cart logic here...
//   } else {
//     try {
//       const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };

//       if (!Array.isArray(storedCart.products)) {
//         storedCart.products = [];
//       }

//       const itemIndex = storedCart.products.findIndex(
//         (item) => item.product._id === productId
//       );

//       if (itemIndex >= 0) {
//         storedCart.products[itemIndex].quantity += quantity;
//         storedCart.products[itemIndex].amount =
//           product.price * storedCart.products[itemIndex].quantity;
//       } else {
//         if (!product) {
//           throw new Error("Product details are missing. Please provide the correct product.");
//         }

//         storedCart.products.push({
//           product,
//           quantity,
//           amount: product.price * quantity,
//         });
//       }

//       localStorage.setItem("cartItems", JSON.stringify(storedCart));
//       setCartItems(storedCart); // Update state for components

//       toast.success("Item added to cart");
//     } catch (error) {
//       console.error("Error adding to cart (localStorage):", error);
//       toast.error("Failed to add the item to the cart.");
//       console.log(menuItems); // Ensure this outputs an array with valid objects
//     }
    
//   }
// };


// the guest and authenticated logic in addtocart testin 22 november 
// const addToCart = async (productId, quantity, product) => {
//   console.log("addToCart called with:", { productId, quantity, product });

//   if (isAuthenticated) {
//     // Authenticated user's cart logic
//     try {
//       const response = await fetch("/api/cart/add", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${userToken}`, // Pass the user's token if required
//         },
//         body: JSON.stringify({ productId, quantity }),
//       });

//       if (!response.ok) {
//         throw new Error("Failed to add item to authenticated user's cart.");
//       }

//       const updatedCart = await response.json();
//       setCartItems(updatedCart.cart); // Update frontend state with the latest cart from the backend
//       toast.success("Item added to cart");
//     } catch (error) {
//       console.error("Error adding to authenticated cart:", error);
//       toast.error("Failed to add the item to the cart.");
//     }
//   } else {
//     // Guest user's cart logic
//     try {
//       const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };

//       if (!Array.isArray(storedCart.products)) {
//         storedCart.products = [];
//       }

//       const itemIndex = storedCart.products.findIndex(
//         (item) => item.product._id === productId
//       );

//       if (itemIndex >= 0) {
//         // Update quantity and amount if the item already exists
//         storedCart.products[itemIndex].quantity += quantity;
//         storedCart.products[itemIndex].amount =
//           product.price * storedCart.products[itemIndex].quantity;
//       } else {
//         // Add new product to the cart
//         if (!product) {
//           throw new Error("Product details are missing. Please provide the correct product.");
//         }

//         storedCart.products.push({
//           product,
//           quantity,
//           amount: product.price * quantity,
//         });
//       }

//       // Save updated cart to localStorage
//       localStorage.setItem("cartItems", JSON.stringify(storedCart));
//       setCartItems(storedCart); // Update state for components

//       toast.success("Item added to cart");
//     } catch (error) {
//       console.error("Error adding to cart (localStorage):", error);
//       toast.error("Failed to add the item to the cart.");
//     }
//   }
// };



// const addToCart = async (productId, quantity, product) => {
//   console.log("called endpoint for add to cart")
//   try{
//   const response = await fetch("http://food-project-api.onrender.com/api/add-to-cart", {
//     method: "POST",
//     headers: {
//       "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Send the token in the Authorization header
//       "Content-Type": "application/json",
//     },
//     body: JSON.stringify({ productId, quantity, product }),
//   });
//   console.log(response)
//   if (!response.ok) {
//     const errorData = await response.json();
//     throw new Error(errorData.message || "Failed to add item to authenticated user's cart.");
//   }

//   const updatedCart = await response.json();
//   console.log(updatedCart)
//   setCartItems(updatedCart.cart); // Update frontend state with the latest cart from the backend
//   toast.success("Item added to cart");
// } catch (error) {
//   console.error("Error adding to authenticated cart:", error.message);
//   toast.error(error.message || "Failed to add the item to the cart.");
// }
// }


        // http://food-project-api.onrender.com/api/add-to-cart
        // https://food-project-api.onrender.com/api/add-to-cart



      // trying 4th december 2024

//       const localCart = JSON.parse(localStorage.getItem("cart_items"));
//           if (localCart && localCart.length > 0) {
//   // Send local cart to the server (client-side)
//             fetch('/api/cart/sync', {
//                method: 'POST',
//                 headers: {
//             'Authorization': `Bearer ${token}`,
//             'Content-Type': 'application/json',
//     },
//     body: JSON.stringify(localCart),
//   });
// }










// mr promise code
// const updateCartItems = async (productId, quantity, itemId, change) => {
//   if (isAuthenticated) {
//     try {
//       const res = await fetch("http://food-project-api.onrender.com/api/update-cart", {
//         method: "PUT",
//         headers: {
//           "Authorization": `Bearer ${localStorage.getItem("auth-token")}`, // Correct string interpolation
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ productId, quantity }),
//       });
      
//       const data = await res.json();
//       if (res.status === 200) {
//         // Find the index of the product in the cart
//         const existingItemsIndex = cartItems.products?.findIndex(
//           (item) => item.product._id === productId
//         );

//         if (existingItemsIndex !== -1) {
//           // Clone the products array and update the specific product
//           const updatedCartItems = [...cartItems.products];
//           const updatedProduct = updatedCartItems[existingItemsIndex];

//           // Update the product's quantity and amount
//           updatedProduct.quantity = parseInt(quantity, 10);
//           updatedProduct.amount = updatedProduct.product.price * updatedProduct.quantity;

//           // Set the new cart state
//           setCartItems({ ...cartItems, products: updatedCartItems });
//           console.log("success", "Cart updated successfully!");
//         }
//       } else {
//         console.log("error", "Could not update cart");
//       }
//     } catch (error) {
//       console.error("Error updating cart:", error);
//       console.log("error", "An error occurred while updating your cart.");
//     }
//   } else {
//     // Handle unauthenticated users (localStorage path)
//      // Get cart from localStorage
//   let cart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };
  
//   const existingItemIndex = cart.products.findIndex(item => item.product._id === productId);

//   if (existingItemIndex !== -1) {
//     // Item found, update quantity
//     const updatedItem = cart.products[existingItemIndex];
//     updatedItem.quantity += quantity;

//     // If the quantity is 0 or less, remove the item from the cart
//     if (updatedItem.quantity <= 0) {
//       cart.products.splice(existingItemIndex, 1);
//     } else {
//       updatedItem.amount = updatedItem.product.price * updatedItem.quantity;
//     }
//   } else if (quantity > 0) {
//     // Item not found and quantity > 0, add it to the cart
//     const newItem = { product: { _id: productId }, quantity, amount: 0 }; // Populate with actual product data
//     cart.products.push(newItem);
//   }

//   // Save the updated cart to localStorage
//   localStorage.setItem("cartItems", JSON.stringify(cart));

//   // Update the context or state
//   setCartItems(cart);
    // const storedCart = JSON.parse(localStorage.getItem("cart")) || { products: [] };
    // const itemIndex = storedCart.products.findIndex(
    //   (item) => item.product._id === productId
    // );

    // if (itemIndex >= 0) {
    //   if (quantity === 0) {
    //     // Remove item from cart if quantity is 0
    //     storedCart.products.splice(itemIndex, 1);
    //   } else {
    //     // Update the quantity and amount for the item
    //     storedCart.products[itemIndex].quantity = parseInt(quantity, 10);
    //     storedCart.products[itemIndex].amount =
    //       storedCart.products[itemIndex].product.price *
    //       storedCart.products[itemIndex].quantity;
    //   }
    //   // Update localStorage with the modified cart
    //   localStorage.setItem("cart", JSON.stringify(storedCart));
    //   setCartItems(storedCart); // Update state with the new cart
    //   console.log("success", "Cart updated successfully!");
    // } else {
    //   console.log("error", "Item not found in cart.");
    // }
//   }
// };


// just now

// const addToCart = async (productId, quantity, product) => {
//   if (isAuthenticated) {
//     // Handle authenticated user's cart
//     try {
//       const token = localStorage.getItem("token");
//       if (!token) {
//         console.error("User token is missing. Please log in.");
//         return;
//       }

//       const res = await fetch("http://food-project-api.onrender.com/api/add-to-cart", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${token}`,
//         },
//         body: JSON.stringify({ productId, quantity }),
//       });

//       const data = await res.json();

//       if (res.ok) {
//         // Clear localStorage cart for authenticated users
//         localStorage.removeItem("cartItems");
//         localStorage.setItem("cart", JSON.stringify(data)); // Persist the updated cart
//         setCartItems(data); // Update state with server response
//         toast("success", "You have successfully added the item to the cart");
//       } else {
//         console.error("Failed to add product to cart:", data.message || "Unknown error");
//         toast("error", data.message || "Failed to add product to cart");
//       }
//     } catch (error) {
//       console.error("Error adding product to cart:", error);
//       toast("error", "An error occurred while adding the item to the cart.");
//     }
//   } else {
//     // Handle unauthenticated user's cart using localStorage
//     try {
//       const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };

//       if (!Array.isArray(storedCart.products)) {
//         storedCart.products = [];
//       }

//       // Check if the product already exists in the cart
//       const itemIndex = storedCart.products.findIndex((item) => item.product._id === productId);

//       if (itemIndex >= 0) {
//         // If the product exists, update the quantity and amount
//         storedCart.products[itemIndex].quantity += quantity;
//         storedCart.products[itemIndex].amount =
//           product.price * storedCart.products[itemIndex].quantity;
//       } else {
//         if (!product) {
//           throw new Error("Product details are missing. Ensure the correct product is being added.");
//         }

//         // Add new product to the cart
//         storedCart.products.push({
//           product,
//           quantity,
//           amount: product.price * quantity,
//         });
//       }

//       // Update localStorage and UI
//       localStorage.setItem("cartItems", JSON.stringify(storedCart));
//       setCartItems(storedCart.products); // Update state for UI
//       toast("success", "Item added to cart");
//     } catch (error) {
//       console.error("Error adding to localStorage cart:", error);
//       toast("error", "Failed to add the item to the cart.");
//     }
//   }
// };

// const totalCartCount = () => {
//   return cartItems.products.reduce((total, item) => total + (item.quantity || 0), 0);
// };

// const updateCartItems = async (productId, quantity, itemId, change) => {
//   if (isAuthenticated) {
//     try {
//       const res = await fetch("http://food-project-api.onrender.com/api/update-cart", {
//         method: "PUT",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${localStorage.getItem("auth-token")}`, // Correct string interpolation
//         },
//         body: JSON.stringify({ productId, quantity }),
//       });

//       const data = await res.json();
//       if (res.status === 200) {
//         // Find the index of the product in the cart
//         const existingItemsIndex = cartItems.products?.findIndex(
//           (item) => item.product._id === productId
//         );

//         if (existingItemsIndex !== -1) {
//           // Clone the products array and update the specific product
//           const updatedCartItems = [...cartItems.products];
//           const updatedProduct = updatedCartItems[existingItemsIndex];

//           // Update the product's quantity and amount
//           updatedProduct.quantity = parseInt(quantity, 10);
//           updatedProduct.amount = updatedProduct.product.price * updatedProduct.quantity;

//           // Set the new cart state
//           setCartItems({ ...cartItems, products: updatedCartItems });
//           toast("success", "Cart updated successfully!");
//         }
//       } else {
//         toast("error", "Could not update cart");
//       }
//     } catch (error) {
//       console.error("Error updating cart:", error);
//       toast("error", "An error occurred while updating your cart.");
//     }
//   } else {
//     // Handle unauthenticated users (localStorage path)
//     let cart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };

//     const existingItemIndex = cart.products.findIndex((item) => item.product._id === productId);

//     if (existingItemIndex !== -1) {
//       // Item found, update quantity
//       const updatedItem = cart.products[existingItemIndex];
//       updatedItem.quantity += quantity;

//       // If the quantity is 0 or less, remove the item from the cart
//       if (updatedItem.quantity <= 0) {
//         cart.products.splice(existingItemIndex, 1);
//       } else {
//         updatedItem.amount = updatedItem.product.price * updatedItem.quantity;
//       }
//     } else if (quantity > 0) {
//       // Item not found and quantity > 0, add it to the cart
//       const newItem = { product: { _id: productId }, quantity, amount: 0 }; // Populate with actual product data
//       cart.products.push(newItem);
//     }

//     // Save the updated cart to localStorage
//     localStorage.setItem("cartItems", JSON.stringify(cart));

//     // Update the context or state
//     setCartItems(cart);
//   }
// };



// trying new code 7 november
  // const addToCart = async (productId, quantity, product) => {
  //   if (isAuthenticated) {
  //     try {
  //       const res = await fetch("https://food-project-api.onrender.com/api/add-to-cart", {
  //         method: "POST",
  //         headers: {
  //           "Content-Type": "application/json",
  //           "auth-token": `${localStorage.getItem("auth-token")}`,
  //         },
  //         body: JSON.stringify({ productId, quantity }),
  //       });
  
  //       if (res.ok) {
  //         const data = await res.json();
  //         setCartItems(data); // add the data
  //         showHide("success", "You have successfully added the item to the cart");
  //       } else {
  //         throw new Error(`Failed to add product: ${res.statusText}`);
  //       }
  //     } catch (error) {
  //       console.error("Error adding item to cart:", error);
  //       showHide("error", `Failed to add product to cart: ${error.message}`);
  //     }
  //   } else {
  //     const storedCart = JSON.parse(localStorage.getItem("cart")) || { products: [] };
  //     const itemIndex = storedCart.products.findIndex(
  //       (item) => item.product._id === productId
  //     );
  
  //     if (itemIndex >= 0) {
  //       storedCart.products[itemIndex].quantity += 1;
  //       storedCart.products[itemIndex].amount = product.price * storedCart.products[itemIndex].quantity;
  //     } else {
  //       storedCart.products.push({
  //         product,
  //         quantity: 1,
  //         amount: product.price * 1,
  //       });
  //     }
  
  //     localStorage.setItem("cart", JSON.stringify(storedCart));
  //     showHide("success", "Product added to cart successfully!");
  //     setCartItems(storedCart);
  //   }
  // };
  

  // my code 1st november
  // const addToCart = async (item) => {
  //   if (!token) {
  //     // Add to localStorage if not logged in
  //     const existingCart = JSON.parse(localStorage.getItem('cartItems') || '[]');
  //     const updatedCart = [...existingCart];
  //     const existingItemIndex = updatedCart.findIndex(cartItem => cartItem._id === item._id);

  //     if (existingItemIndex > -1) {
  //       updatedCart[existingItemIndex].quantity += 1;
  //     } else {
  //       updatedCart.push({ ...item, quantity: 1 });
  //     }

  //     localStorage.setItem('cartItems', JSON.stringify(updatedCart));
  //     setCartItems(updatedCart);
  //   } else {
  //     try {
  //       // Add to server cart if logged in
  //       const response = await axios.post(
  //         `${url}/api/cart/add`,
  //         { itemId: item._id },
  //         { headers: { Authorization: `Bearer ${token}` } }
  //       );

  //       if (response.data.success) {
  //         setCartItems((prevCartItems) => {
  //           const updatedCartItems = [...prevCartItems];
  //           const existingItemIndex = updatedCartItems.findIndex(cartItem => cartItem._id === item._id);

  //           if (existingItemIndex > -1) {
  //             updatedCartItems[existingItemIndex].quantity += 1;
  //           } else {
  //             updatedCartItems.push({ ...item, quantity: 1 });
  //           }

  //           return updatedCartItems;
  //         });
  //       } else {
  //         console.error('Failed to add item to cart:', response.data.message);
  //       }
  //     } catch (error) {
  //       console.error('Error adding item to cart:', error);
  //     }
  //   }
  // };


  // mr promise code 1st november
  // remove cart items


  
  // testing removedcartitems 21 november

  // const removeCartItems = (productId) => {
  //   const updatedCart = {
  //     ...cartItems,
  //     menus: cartItems.menus.filter((item) => item.menu._id !== productId),
  //   };
  //   localStorage.setItem("cartItems", JSON.stringify(updatedCart));
  //   setCartItems(updatedCart);
  //   toast.info("Item removed from cart");
  // };


  // update testing 21 november


  

  // } else {
  //   // Handle unauthenticated users (localStorage path)
  //    // Get cart from localStorage
  // let cart = JSON.parse(localStorage.getItem("cartItems")) || { menus: [] };
  
  // const existingItemIndex = cart.menus.findIndex(item => item.menu._id === productId);

  // if (existingItemIndex !== -1) {
  //   // Item found, update quantity
  //   const updatedItem = cart.menus[existingItemIndex];
  //   updatedItem.quantity += quantity;

  //   // If the quantity is 0 or less, remove the item from the cart
  //   if (updatedItem.quantity <= 0) {
  //     cart.menus.splice(existingItemIndex, 1);
  //   } else {
  //     updatedItem.amount = updatedItem.menu.price * updatedItem.quantity;
  //   }
  // } else if (quantity > 0) {
  //   // Item not found and quantity > 0, add it to the cart
  //   const newItem = { product: { _id: productId }, quantity, amount: 0 }; // Populate with actual product data
  //   cart.menus.push(newItem);
  // }

  // // Save the updated cart to localStorage
  // localStorage.setItem("cartItems", JSON.stringify(cart));

  // // Update the context or state
  // setCartItems(cart);
  //   const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { menus: [] };
  //   const itemIndex = storedCart.menus.findIndex(
  //     (item) => item.menu._id === productId
  //   );

  //   if (itemIndex >= 0) {
  //     if (quantity === 0) {
  //       // Remove item from cart if quantity is 0
  //       storedCart.menus.splice(itemIndex, 1);
  //     } else {
  //       // Update the quantity and amount for the item
  //       storedCart.menus[itemIndex].quantity = parseInt(quantity, 10);
  //       storedCart.menus[itemIndex].amount =
  //         storedCart.menus[itemIndex].menu.price *
  //         storedCart.menus[itemIndex].quantity;
  //     }
  //     // Update localStorage with the modified cart
  //     localStorage.setItem("cart", JSON.stringify(storedCart));
  //     setCartItems(storedCart); // Update state with the new cart
  //     console.log("success", "Cart updated successfully!");
  //   } else {
  //     console.log("error", "Item not found in cart.");
  //   }
  // }



  // const updateCartItems = (productId, change) => {
  //   const updatedCart = { ...cartItems };
  //   const itemIndex = updatedCart.menus.findIndex(
  //     (item) => item.menu._id === productId
  //   );

  //   if (itemIndex >= 0) {
  //     updatedCart.menus[itemIndex].quantity += change;

  //     if (updatedCart.menus[itemIndex].quantity <= 0) {
  //       updatedCart.menus.splice(itemIndex, 1); // Remove item if quantity is zero
  //     } else {
  //       updatedCart.menus[itemIndex].amount =
  //         updatedCart.menus[itemIndex].menu.price *
  //         updatedCart.menus[itemIndex].quantity;
  //     }
  //   }

  //   localStorage.setItem("cartItems", JSON.stringify(updatedCart));
  //   setCartItems(updatedCart);
  // };




  // my code 1st november 
  // not sure
  // const removeCartItem = async (itemId) => {
  //   if (!token) {
  //     const updatedCart = cartItems.filter(item => item._id !== itemId);
  //     setCartItems(updatedCart);
  //     localStorage.setItem('cartItems', JSON.stringify(updatedCart));
  //   } else {
  //     try {
  //       const updatedCart = cartItems.filter(item => item._id !== itemId);
  //       setCartItems(updatedCart);
  //       localStorage.setItem('cartItems', JSON.stringify(updatedCart));

  //       await axios.delete(`${url}/api/cart/delete`, {
  //         headers: { Authorization: `Bearer ${token}` },
  //         data: { itemId },
  //       });
  //     } catch (error) {
  //       console.error('Error removing item from cart:', error);
  //       window.location.href = '/menu'; // Redirect to menu if necessary
  //     }
  //   }
  // };


 




  //Still on frontend my code 1st november 
  // const addCartItem = (itemId) => {
  //   setCartItems(prevCartItems => {
  //     const existingItemIndex = prevCartItems.findIndex(item => item._id === itemId);
  //     if (existingItemIndex > -1) {
  //       const updatedCartItems = prevCartItems.map(item => 
  //         item._id === itemId
  //           ? { ...item, quantity: item.quantity + 1 }
  //           : item
  //       );
  //       return updatedCartItems;
  //     } else {
  //       const newItem = {}; // Replace with actual item details
  //       return [...prevCartItems, { ...newItem, quantity: 1 }];
  //     }
  //   });
  // };


 




// new item with undefined my work
  // const addCartItem = (itemId) => {
  //   setCartItems(prevCartItems => {
  //     const existingItemIndex = prevCartItems.findIndex(item => item._id === itemId);
  //     if (existingItemIndex > -1) {
  //       // Increment quantity
  //       return prevCartItems.map(item =>
  //         item._id === itemId
  //           ? { ...item, quantity: item.quantity + 1 }
  //           : item
  //       );
  //     } else {
  //       // Find the item in menuItems
  //       const newItem = menuItems.find(item => item._id === itemId);
  //       if (newItem) {
  //         // Return new cart item structure
  //         return [...prevCartItems, { ...newItem, quantity: 1 }];
  //       } else {
  //         console.error('Item not found:', itemId);
  //         return prevCartItems; // Avoid undefined items
  //       }
  //     }
  //   });
  // };
  

  // new item 29
  // const addCartItem = (itemId) => {
  //   setCartItems(prevCartItems => {
  //     const existingItemIndex = prevCartItems.findIndex(item => item._id === itemId);
  //     if (existingItemIndex > -1) {
  //       // Increment quantity if the item already exists
  //       return prevCartItems.map(item => 
  //         item._id === itemId
  //           ? { ...item, quantity: item.quantity + 1 }
  //           : item
  //       );
  //     } else {
  //       const newItem = menuItems.find(item => item._id === itemId); // Find the item details
  //       if (newItem) {
  //         return [...prevCartItems, { ...newItem, quantity: 1 }];
  //       }
  //       console.error('Item not found for ID:', itemId);
  //       return prevCartItems; // Return existing if the item is not found
  //     }
  //   });
  // };
  
  // still on frontend
  // const reduceCartItem = (itemId) => {
  //   setCartItems(prevCartItems => {
  //     const updatedCartItems = prevCartItems.map(item => {
  //       if (item._id === itemId) {
  //         return {
  //           ...item,
  //           quantity: item.quantity > 1 ? item.quantity - 1 : item.quantity,
  //         };
  //       }
  //       return item;
  //     }).filter(item => item.quantity > 0); // Remove items with zero quantity
  //     return updatedCartItems;
  //   });
  // };
  


      // update from perplexity 24 november
      // try {
      //   const response = await getUserProfile(); // Fetch user profile from API
      //   console.log("Profile data:", response.profile);
        
      //   setUserProfile(response.profile); // Update state with fetched profile data
      //   setUserName(response.profile.name); // Assuming 'name' is the field for username
      // } catch (error) {
      //   console.error('Failed to fetch user profile:', error);
      // }


  // Fetch user profile when the component mounts or `url` changes
// useEffect(() => {
//   if (!userProfile) {
//       console.log("Fetching user profile...");
//       getUserProfile();
//   }
// }, [url, userProfile]); // Run on `url` change or if `userProfile` is not set



// Reset state when user profile updates
// useEffect(() => {
//   if (userProfile) {
//       console.log("User profile updated, resetting hasLoggedProfile...");
//       setHasLoggedProfile(false);
//   }
// }, [userProfile]);


  // november 1st i changed from 30th oct
//   const getUserProfile = async () => {
//     const token = localStorage.getItem('auth-token');

//     // Only fetch profile if it hasn't been set yet
//     if (userProfile) return;

//     if (token) {
//         try {
//             const response = await fetch(`${url}/api/profile`, {
//                 method: 'GET',
//                 headers: {
//                     'Authorization': `Bearer ${token}`,
//                 },
//             });

//             if (!response.ok) {
//                 if (response.status === 401) {
//                     alert("Your session has expired. Please log in again."); // Notify user
//                     window.location.href = '/login'; // Redirect to login
//                 }
//                 const errorText = await response.text(); // Get error text for better insight
//                 throw new Error(`Network response was not ok: ${errorText}`);
//             }

//             const data = await response.json();
//             console.log("Profile data:", data.profile);

//             setUserProfile(data.profile);
//             setUserName(data.profile.name); // Assuming you want to set just the name
//         } catch (error) {
//             console.error('Failed to fetch user profile:', error);
//         }
//     } else {
//         alert("No authentication token found. Please log in.");
//     }
// };

  

// const getUserProfile = async () => {
//   const token = localStorage.getItem('auth-token');
  
//   // Only fetch profile if it hasn't been set yet
//   if (userProfile) return;

//   if (token) {
//       try {
//           const response = await fetch(`${url}/api/profile`, {
//               method: 'GET',
//               headers: {
//                   'Authorization': `Bearer ${token}`,
//               },
//           });

//           if (!response.ok) {
//               throw new Error('Network response was not ok');
//           }

//           const data = await response.json();

//           // Log profile data only once
//           if (!hasLoggedProfile.current) {
//               console.log("Profile data:", data.profile);
//               hasLoggedProfile.current = true; // Prevent further logging
//           }

//           setUserProfile(data.profile);
//           setUserName(data.profile);
//       } catch (error) {
//           console.error('Failed to fetch user profile:', error);
//       }
//   }
// };

// // useEffect to fetch user profile on component mount
// useEffect(() => {
//   getUserProfile();
// }, [url]); // Only re-run if `url` changes


// const getUserProfile = async () => {
//   const token = localStorage.getItem('auth-token');
  
//   // Only fetch profile if it hasn't been set yet
//   if (userProfile) return;

//   if (token) {
//       try {
//           const response = await fetch(`${url}/api/profile`, {
//               method: 'GET',
//               headers: {
//                   'Authorization': `Bearer ${token}`,
//               },
//           });

//           if (!response.ok) {
//               throw new Error('Network response was not ok');
//           }

//           const data = await response.json();

//           // Log profile data only once
//           if (!hasLoggedProfile) {
//               console.log("Profile data:", data.profile);
//               setHasLoggedProfile(true); // Prevent further logging
//           }

//           setUserProfile(data.profile);
//           setUserName(data.profile);
//       } catch (error) {
//           console.error('Failed to fetch user profile:', error);
//       }
//   }
// };


// useEffect to fetch user profile on component mount
// useEffect(() => {
//   getUserProfile();
// }, [url]); // Only re-run if `url` changes

// // useEffect to reset the profile on logout or when userProfile is set
// useEffect(() => {
//   if (userProfile) {
//       setHasLoggedProfile(false); // Reset logging state if user profile changes
//   }
// }, [userProfile]);






  // updated 26 oct 2024
  // const getUserProfile = async () => {
  //   const token = localStorage.getItem('auth-token');
  //   if (userProfile) return; // Avoid fetching if userProfile is already set
  //   if (token) {
  //     try {
  //       const response = await fetch(`${url}/api/profile`, {
  //         method: 'GET',
  //         headers: {
  //           'Authorization': `Bearer ${token}`,
  //         },
  //       });
  
  //       if (!response.ok) {
  //         throw new Error('Network response was not ok');
  //       }
  
  //       const data = await response.json();
  //       console.log("profile data", data.profile);
  //       setUserProfile(data.profile);
  //       setUserName(data.profile.firstName); // Assuming userName is firstName
  //     } catch (error) {
  //       console.error('Failed to fetch user profile:', error);
  //     }
  //   }
  // };
  
  // // Example usage in a component
  // useEffect(() => {
  //   getUserProfile();
  // }, []); // Empty dependency array ensures this runs only once when the component mounts
  

  // const updateUserProfile = async (formData) => {
  //   // Perform the update request...
  //   const updatedProfile = await api.updateProfile(formData); // Assuming this returns the updated profile
  
  //   // Update the context state
  //   setUserProfile(updatedProfile);
  // };

  
  // new page 17th oct working perfectly


  

  // useEffect(()=>{
  //     setUserProfile(null)
  // }, [])


    // setUserName(user.name);

    // Log the whole user object to check if name is present
    
      // On successful login


 

  // new 31th oct
  // const updateUserProfile = async (profileData) => {
  //   if (!token) {
  //     console.error("No authentication token found.");
  //     return;
  //   }
  
  //   try {
  //     const response = await axios.post(`${url}/api/profile/update`, profileData, {
  //       headers: { Authorization: `Bearer ${token}` }
  //     });
  
  //     // Update the context state with the new profile
  //     setUserProfile(response.data.profile);
  //     setUserName(response.data.profile.firstName); // Update username immediately
  //   } catch (error) {
  //     if (error.response) {
  //       console.error("Error response:", error.response.data);
  //     } else {
  //       console.error("Error updating profile:", error.message);
  //     }
  //   }
  // };
  
  // useEffect(() => {
  //   const fetchUserProfile = async () => {
  //     if (token) {
  //       try {
  //         const response = await axios.get(`${url}/api/profile`, {
  //           headers: { Authorization: `Bearer ${token}` }
  //         });
  //         setUserProfile(response.data.profile);
  //         setUserName(response.data.profile.firstName);
  //       } catch (error) {
  //         console.error("Error fetching user profile:", error);
  //       }
  //     }
  //   };
  
  //   fetchUserProfile();
  // }, [token]);
  
  // const handleUserLogin = (newToken, user) => {
  //   setToken(newToken);
  //   setUserName(user.name);
  //   setUserProfile(user);
  // };
  

  // const handleUserLogin = (token, user) => {
  //   setUserData(user); // Assuming this updates user data including avatar
  //   setAuthToken(token);
  // };

 
  // mr promise code 1st november

  
        //  const res = await fetch("https://food-project-api.onrender.com/api/payment/verify", {



      //just added 31 jan 2025
      // const response = await fetch('/api/payment/verify');
      // if (!response.ok) {
      //     console.error('Error verifying payment:', response.statusText);
      //     return;
      // }
      // const data = await response.json();
      // if (!data) {
      //     console.error('No data returned from createOrder');
      //     return;
      // }



      
  // my code 1st november
  // const createOrder = async(transaction_id, orderId)=>{
  //   try {
  //     const response = await fetch("https://localhost:3000/api/payment/verify", {
  //     // const response = await fetch("https://food-project-api.onrender.com/api/payment/verify", {
  //       method: "POST",
  //       headers: {
  //         "Content-Type": "application/json",
  //         "auth-token": `${localStorage.getItem("auth-token")}`,
  //       },
  //       body: JSON.stringify({ transaction_id, orderId }),
  //       credentials: "include"
  //     });
  //     console.log({ transaction_id, orderId })
  
  //     const data = await response.json()
  //     console.log(data)
  //     if (response.ok) {
  //       setOrder(data.order)
  //       setCartItems([])
  //     }else{
  //       console.error(data.msg)
  //     }
  //   } catch (error) {
  //     console.error(error);
      
  //   }
  
  // }
  



// new 25 oct



// import React, { createContext, useState, useEffect } from "react";
// import axios from 'axios';
// import AuthContext from "./AuthContext";

// export const MenuContext = createContext(null);

// const MenuContextProvider = ({ children }) => {
//   const [cartItems, setCartItems] = useState([]);
//   const [url] = useState("https://food-project-api.onrender.com");
//   const [menuItems, setMenuItems] = useState([]);
//   const [breakItems, setBreakItems] = useState([]);
//   const [naijaItems, setNaijaItems] = useState([]);
//   const [saladItems, setSaladItems] = useState([]);
//   const [signatureItems, setSignatureItems] = useState([]);
//   const [restaurantList, setRestaurantList] = useState([]);
//   const [userName, setUserName] = useState('');
//   const [userProfile, setUserProfile] = useState(null);
//   const [error, setError] = useState(null);
//   const [success, setSuccess] = useState(false);
//   const [token, setToken] = useState(localStorage.getItem('auth-token') || '');

//   const isAuthenticated = !!token; // Check if token exists

//   // Load cart items from localStorage
//   useEffect(() => {
//     const storedCartItems = localStorage.getItem('cartItems');
//     if (storedCartItems) {
//       setCartItems(JSON.parse(storedCartItems));
//     }
//   }, []);

//   // Save cart items to localStorage
//   useEffect(() => {
//     localStorage.setItem('cartItems', JSON.stringify(cartItems));
//   }, [cartItems]);

//   // Sync local cart with server
//   const syncLocalCartWithServer = async () => {
//     if (token) {
//       try {
//         const localCart = JSON.parse(localStorage.getItem('cartItems') || '[]');
//         if (localCart.length > 0) {
//           const response = await axios.post(`${url}/api/cart/sync`, { cartItems: localCart }, {
//             headers: { Authorization: `Bearer ${token}` }
//           });
//           if (response.data?.cartData) {
//             setCartItems(response.data.cartData);
//             localStorage.removeItem('cartItems'); // Clear local storage after sync
//           }
//         } else {
//           fetchCartData(token);
//         }
//       } catch (error) {
//         console.error("Error syncing cart data with server:", error);
//         setError("Failed to sync cart data");
//       }
//     }
//   };

//   const fetchCartData = async (authToken) => {
//     try {
//       const response = await axios.get(`${url}/api/cart/get`, {
//         headers: { Authorization: `Bearer ${authToken}` }
//       });
//       if (response.data?.cartData) {
//         setCartItems(response.data.cartData);
//         localStorage.removeItem('cartItems');
//       } else {
//         console.error('Cart data is missing');
//         setCartItems([]);
//       }
//     } catch (error) {
//       console.error('Error fetching cart data:', error);
//       setError("Failed to fetch cart data");
//       setCartItems([]);
//     }
//   };

//   useEffect(() => {
//     if (token) {
//       localStorage.setItem('auth-token', token);
//       syncLocalCartWithServer();
//     } else {
//       localStorage.removeItem('auth-token');
//       setCartItems(JSON.parse(localStorage.getItem('cartItems') || '[]'));
//     }
//   }, [token]);

//   const fetchMenuData = async () => {
//     try {
//       const response = await axios.get(`${url}/api/menu/featured`);
//       if (response.data.success) {
//         setMenuItems(response.data.data || []);
//       } else {
//         console.error('Failed to fetch menu data:', response.data.message);
//         setError('Failed to fetch menu data');
//       }
//     } catch (error) {
//       console.error('Error fetching menu data:', error);
//       setError('Error fetching menu data');
//     }
//   };

//   // Other fetch functions follow the same pattern...

//   useEffect(() => {
//     fetchMenuData();
//     // Fetch other data here...
//   }, []);

//   const handleUserLogin = (newToken, user) => {
//     setToken(newToken);
//     setUserName(user.name);
//     setUserProfile(user);
//     localStorage.setItem('auth-token', newToken); // Store the token in localStorage
//   };

//   const contextValue = {
//     cartItems,
//     addToCart,
//     removeCartItem,
//     menuItems,
//     breakItems,
//     saladItems,
//     naijaItems,
//     signatureItems,
//     restaurantList,
//     url,
//     fetchUserData,
//     fetchCartData,
//     userName,
//     getUserProfile,
//     isAuthenticated,
//     userProfile,
//     updateUserProfile,
//     handleUserLogin,
//     error,
//     success,
//   };

//   return (
//     <MenuContext.Provider value={contextValue}>
//       {children}
//     </MenuContext.Provider>
//   );
// };

// export default MenuContextProvider;




   // mr promise code 1st november
  // adding items to cart
  // Modified addToCart function to ensure reliable localStorage storage for unauthenticated users

// const addToCart = async (productId, quantity, product) => {
//   if (isAuthenticated) {
//     try {
//       const res = await fetch("http://food-project-api.onrender.com/api/add-to-cart", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${localStorage.getItem("token")}`,
//           // "Authorization": `${localStorage.getItem("auth-token")}`,
//         },
//         body: JSON.stringify({ productId, quantity }),
//       });
//       const data = await res.json();
//       if (res.ok) {
//         localStorage.setItem("cart",JSON.stringify(data))
//         setCartItems(data); // Updates the cart items in state for authenticated users
//         showHide("success", "You have successfully added item to cart");
//       } else {
//         // showHide("error", "Product was not added to cart");
//         console.log("error", "Product already exists")
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   } else {
//     // Handle unauthenticated users' cart using localStorage
//     // console.log("running unauth")
//     // const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };
//     // console.log("running unauth 1", storedCart)
//     // // Check if the product already exists in the cart
//     // const itemIndex = storedCart.products.findIndex((item) => item.product._id === productId);
//     // console.log(itemIndex)
//     const storedCart = JSON.parse(localStorage.getItem("cartItems")) || { products: [] };
//     console.log("running unauth 1", storedCart);

   


//     // Ensure storedCart.products is an array
//     if (!Array.isArray(storedCart.products)) {
//       storedCart.products = [];
//     }

//     // Check if the product already exists in the cart
//     const itemIndex = storedCart.products.findIndex((item) => item.product._id === productId);
//     console.log(itemIndex);

//     if (itemIndex >= 0) {
//       // If the product exists, update the quantity and amount
//       storedCart.products[itemIndex].quantity += quantity;
//       storedCart.products[itemIndex].amount = product.price * storedCart.products[itemIndex].quantity;
//     } else {
//       // If the product doesn't exist, add it to the cart
//       // storedCart.products.push({
//       //   product,
//       //   quantity,
//       //   amount: product.price * quantity,
//       // });
//       if (!product) {
//         throw new Error("Product is undefined. Ensure the product is fetched correctly.");
//       }
//       if (!productId) {
//   throw new Error("Product ID is missing. Ensure the correct product ID is provided.");
// }

      
//       storedCart.products.push({
//         product,
//         quantity,
//         amount: product.price * quantity, // Safe to access now
//       });
//       console.log("Adding product to cart:", product);

// if (!product) {
//   throw new Error("Product is undefined. Check the source of 'product'.");
// }

      
//     }
//     const stringed = JSON.stringify(storedCart)
//     localStorage.setItem("cartItems", stringed)
//     setCartItems(storedCart); // Updates cart items in state for unauthenticated users
//   }
// };




  // my code 1st november
  // Fetch cart data from server
  // const fetchCartData = async (authToken) => {
  //   if (!authToken) {
  //     console.error('No authentication token found');
  //     return;
  //   }

  //   try {
  //     const response = await axios.get(`${url}/api/cart/users`, {
  //       headers: { Authorization: `Bearer ${authToken}` }
  //     });
  //     if (response.data && Array.isArray(response.data.cartData)) {
  //       setCartItems(response.data.cartData);
  //       localStorage.removeItem('cartItems'); // Ensure localStorage is cleared when fetching cart data
  //     } else {
  //       console.error('Cart data is not an array or is missing');
  //       setCartItems([]);
  //     }
  //   } catch (error) {
  //     console.error('Error fetching cart data:', error.message || error);
  //     setCartItems([]);
  //   }
  // };

  // useEffect(() => {
  //   if (token) {
  //     localStorage.setItem('auth-token', token);
  //     syncLocalCartWithServer();
  //   } else {
  //     localStorage.removeItem('auth-token');
  //     const localCart = JSON.parse(localStorage.getItem('cartItems') || '[]');
  //     setCartItems(localCart);
  //   }
  // }, [token]);

  // Fetch menu data


  

      // testing 4th december 2024
      // Fetch cart items after login (client-side)
// fetch('/api/cart', {
//   method: 'GET',
//   headers: {
//     'Authorization': `Bearer ${localStorage.getItem("auth_token")}`,
//   },
// })
// .then(response => response.json())
// .then(cart => {
//   // Sync cart data on the client
//   localStorage.setItem('cart_items', JSON.stringify(cart));
// });


// old code to try format price

// import React, { useContext } from "react";
// import { MenuContext } from "../context/MenuContext";
// import Card from "./shared/Card";
// import { toast } from "react-toastify";
// import 'react-toastify/dist/ReactToastify.css';

// function BreakfastPage() {
//   const { breakItems, addToCart } = useContext(MenuContext);

//   const handleAddToCart = (item) => {
//     addToCart(item);
//     console.log(`Added ${item.name} to cart`);
//     toast.success(`Added ${item.name} to cart`);
//   };

//   return (
//     <div className="my-5 mx-2 sm:mx-5 lg:mx-20">
//       <h1 className="mb-5 text-purple-500 font-bold text-2xl sm:text-3xl lg:text-4xl text-center">
//         Continental Breakfast
//       </h1>
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6">
//         {breakItems.length > 0 ? (
//           breakItems.map((item) => (
//             <Card key={item._id} className="relative">
//               <div className="relative">
//                 <img
//                   src={`https://food-project-api.onrender.com/uploads/${item.img}`} // Adjust URL as needed
//                   alt={item.name}
//                   className="w-[350px] h-[280px] sm:h-48 md:h-52 lg:h-56 object-cover transition-transform duration-300 transform hover:scale-105 rounded-lg"
//                 />
//                 <div className="absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300">
//                   <p className="text-white text-base sm:text-lg font-bold">View Details</p>
//                 </div>
//               </div>
//               <div className="p-2 sm:p-4">
//                 <p className="font-bold text-base sm:text-lg">{item.name}</p>
//                 <p className="text-gray-600 text-sm sm:text-base">{item.description}</p>
//                 <b className="text-gray-600 block text-sm sm:text-base">₦{item.price}</b>
//                 <button
//                   className="bg-purple-400 text-white p-2 rounded mt-2 w-full text-sm sm:text-base hover:bg-purple-500 transition-colors duration-300"
//                   onClick={() => handleAddToCart(item)}
//                 >
//                   Add to Cart
//                 </button>
//               </div>
//             </Card>
//           ))
//         ) : (
//           <p className="text-center text-gray-500">No breakfast items available</p>
//         )}
//       </div>
//     </div>
//   );
// }

// export default BreakfastPage;



// new code with format price function

// old code to try format price

// import React, { useContext } from "react";
// import { MenuContext } from "../context/MenuContext";
// import Card from "./shared/Card";
// import { toast } from "react-toastify";
// import 'react-toastify/dist/ReactToastify.css';

// function BreakfastPage() {
//   const { breakItems, addToCart } = useContext(MenuContext);

//   const handleAddToCart = (item) => {
//     addToCart(item);
//     console.log(`Added ${item.name} to cart`);
//     toast.success(`Added ${item.name} to cart`);
//   };

//   return (
//     <div className="my-5 mx-2 sm:mx-5 lg:mx-20">
//       <h1 className="mb-5 text-purple-500 font-bold text-2xl sm:text-3xl lg:text-4xl text-center">
//         Continental Breakfast
//       </h1>
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6">
//         {breakItems.length > 0 ? (
//           breakItems.map((item) => (
//             <Card key={item._id} className="relative">
//               <div className="relative">
//                 <img
//                   src={`https://food-project-api.onrender.com/uploads/${item.img}`} // Adjust URL as needed
//                   alt={item.name}
//                   className="w-[350px] h-[280px] sm:h-48 md:h-52 lg:h-56 object-cover transition-transform duration-300 transform hover:scale-105 rounded-lg"
//                 />
//                 <div className="absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300">
//                   <p className="text-white text-base sm:text-lg font-bold">View Details</p>
//                 </div>
//               </div>
//               <div className="p-2 sm:p-4">
//                 <p className="font-bold text-base sm:text-lg">{item.name}</p>
//                 <p className="text-gray-600 text-sm sm:text-base">{item.description}</p>
//                 <b className="text-gray-600 block text-sm sm:text-base">₦{item.price}</b>
//                 <button
//                   className="bg-purple-400 text-white p-2 rounded mt-2 w-full text-sm sm:text-base hover:bg-purple-500 transition-colors duration-300"
//                   onClick={() => handleAddToCart(item)}
//                 >
//                   Add to Cart
//                 </button>
//               </div>
//             </Card>
//           ))
//         ) : (
//           <p className="text-center text-gray-500">No breakfast items available</p>
//         )}
//       </div>
//     </div>
//   );
// }

// export default BreakfastPage;



// new code with format price function




  // const handleAddToCart = (item) => {
  //   addToCart(item._id, 1, item); //pass product ID, quantity, and product details also showing undefined 
  //   toast.success(`Added ${item.name} to cart`);
  //   console.log(item._id, 1, item); //added _ to the item._id it shows the id no, but when remove _ it shows undefined
  // };
  // const handleAddToCart = (item) => {
  //   if (!item || !item._id) {
  //     toast.error("Invalid item selected.");
  //     console.error("Invalid item passed to addToCart:", item);
  //     return;

     
  //   }
  //   addToCart(item._id, 1, item);
  //   toast.success(`Added ${item.name} to cart`);
  // };



  

// new
// import React, { useContext, useEffect } from 'react';
// import Card from './shared/Card';
// import { Link } from 'react-router-dom';
// import { MenuContext } from '../context/MenuContext';
// import { toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';


// // Utility function to format numbers into thousands (K) or millions (M)
// const formatPrice = (price) => {
//   if (price >= 1000000) {
//     return `${(price / 1000000).toFixed(1)}M`;  // For millions
//   }
//   if (price >= 1000) {
//     return `${(price / 1000).toFixed(1)}K`;  // For thousands
//   }
//   return price.toString();  // For values less than 1,000
// };

// function Featured() {
//   const { menuItems, addToCart } = useContext(MenuContext);

//   useEffect(() => {
//     console.log('Featured menuItems:', menuItems);
//   }, [menuItems]); // Log only when menuItems change

//   // const handleAddToCart = (item) => {
//   //   if (item?._id) {
//   //     addToCart(item);
//   //     toast.success(`Added ${item.name} to cart`);
//   //   } else {
//   //     console.error('Item does not have a valid _id');
//   //     toast.error('Item does not have a valid _id');
//   //   }
//   // };
  
//   const handleAddToCart = (item) => {
//     addToCart(item._id, 1, item); //pass product ID, quantity, and product details
//     toast.success(`Added ${item.name} to cart`);
//     console.log(item._id, 1, item);
//   };
  
//   return (
//     <div className="my-5 mx-2 sm:mx-5 lg:mx-20">
//       <h1 className="mb-5 text-purple-500 font-bold text-2xl sm:text-3xl lg:text-4xl text-center">
//         Starters Meal
//       </h1>
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6">
//         {menuItems.map((item) => (
//           <Card key={item._id} className="relative">
//             <Link to={`${item._id}`} className="block relative">
//               <img
//                 src={`https://food-project-api.onrender.com/uploads/${item.img}`} // Adjust URL as needed
//                 alt={item.name}
//                 className="w-[350px] h-[280px] sm:h-48 md:h-52 lg:h-56 object-cover transition duration-300 transform hover:scale-105 rounded-lg"
//               />
//               <div className="absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition duration-300">
//                 <p className="text-white text-base sm:text-lg font-bold">View Details</p>
//               </div>
//             </Link>
//             <div className="p-2 sm:p-4">
//               <p className="font-bold text-base sm:text-lg">{item.name}</p>
//               <p className="text-gray-600 text-sm sm:text-base">{item.description}</p>
//               {/* <b className="text-gray-600 block text-sm sm:text-base">₦{item.price}</b> */}
//               <b className="text-gray-600 block text-sm sm:text-base">₦{formatPrice(item.price)}</b>
//               <button
//                 className="bg-purple-400 text-white p-2 rounded mt-2 w-full text-sm sm:text-base"
//                 onClick={() => handleAddToCart(item)}
//               >
//                 Add to Cart
//               </button>
//             </div>
//           </Card>
//         ))}
//       </div>
//     </div>
//   );
// }

// export default Featured;



// import React, { useContext } from "react";
// import Card from "./shared/Card";
// import { Link } from "react-router-dom";
// import { MenuContext } from "../context/MenuContext";
// import { toast } from "react-toastify";
// import 'react-toastify/dist/ReactToastify.css';


// // Utility function to format numbers into thousands (K) or millions (M)
// const formatPrice = (price) => {
//   if (price >= 1000000) {
//     return `${(price / 1000000).toFixed(1)}M`;  // For millions
//   }
//   if (price >= 1000) {
//     return `${(price / 1000).toFixed(1)}K`;  // For thousands
//   }
//   return price.toString();  // For values less than 1,000
// };

// function Salad() {
//   const { saladItems, addToCart } = useContext(MenuContext);

//   const handleAddToCart = (item) => {
//     addToCart(item._id, 1, item); // Here, 1 is the default quantity
//     console.log(`Added ${item.name} to cart`);
//     toast.success(`Added ${item.name} to cart`);
//   };

//   return (
//     <div className="my-5 mx-2 sm:mx-5 lg:mx-20">
//       <h1 className="mb-5 text-purple-500 font-bold text-2xl sm:text-3xl lg:text-4xl text-center">
//         Salads
//       </h1>
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6">
//         {saladItems.map((item) => (
//           <Card key={item._id}>
//             <div to={`/details/${item._id}`} className="block relative">
//               <img
//                 src={`https://food-project-api.onrender.com/uploads/${item.img}`} // Adjust URL as needed
//                 alt={item.name}
//                 className="w-[350px] h-[280px] sm:h-48 md:h-52 lg:h-56 object-cover transition duration-300 transform hover:scale-105 rounded-lg"
//               />
//               <div className="absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition duration-300">
//                 <p className="text-white text-base sm:text-lg font-bold">View Details</p>
//               </div>
//             </div>
//             <div className="p-2 sm:p-4">
//               <p className="font-bold text-base sm:text-lg">{item.name}</p>
//               <p className="text-gray-600 text-sm sm:text-base">{item.description}</p>
//               {/* <p className="text-gray-600 text-sm sm:text-base font-bold">₦{item.price}</p> */}
//               <b className="text-gray-600 block text-sm sm:text-base">₦{formatPrice(item.price)}</b>
//               <button
//                 className="bg-purple-400 text-white p-2 rounded mt-2 w-full text-sm sm:text-base"
//                 onClick={() => handleAddToCart(item)}
//               >
//                 Add to Cart
//               </button>
//             </div>
//           </Card>
//         ))}
//       </div>
//     </div>
//   );
// }

// export default Salad;


  // const handleAddToCart = (item) => {
  //   if (!item || !item.id) {
  //     console.error("Item or Item ID is missing:", item);
  //     return;
  //   }
  //   console.log(item.id, 1, item);
  // };


  import React from "react";
import Header from "./components/Header";
import Featured from "./components/Featured";
import Menu from "./components/pages/Menu";
import BreakfastPage from "./components/BreakfastPage";
import Salad from "./components/Salad";
import NigerianSoup from "./components/NigerianSoup";
import Signature from "./components/Signature";
import Home from "./components/pages/Home";
// import Details from "./components/pages/Details";
import Cart from "./components/pages/Cart";
import Footer from "./components/Footer";
import {
  starter,
  breakfast,
  dishes,
  nigerian,
  signatures,
} from "./components/data/EcomData";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
// import Restaurant from "./components/pages/Restaurant";
import MenuContextProvider from "./context/MenuContext";
// import SignupLogin from "./components/pages/SignupLogin";
import Checkout from "./components/pages/Checkout";
import Thanks from "./components/pages/Thanks";
import "leaflet/dist/leaflet.css";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { AuthProvider } from "./context/AuthContext";
import useLocalStorage from "./hooks/useLocalStorage";

function App() {
  const featured = starter.filter((item) => item.featured === true);
  const breakfastPage = breakfast.filter((item) => item.BreakfastPage === true);
  const salad = dishes.filter((item) => item.salad === true);
  const nigerianSoup = nigerian.filter((item) => item.NigerianSoup === true);
  const signature = signatures.filter((item) => item.signature === true);

  const { getItem } = useLocalStorage("auth-token");
  const token = getItem("auth-token");
  let authInitialState = { accessToken: token ?? null };

  return (
    <AuthProvider defaultState={authInitialState}>
      <MenuContextProvider>
        <Router>
          <Header />
          <Routes>
            <Route path="/" element={<Home />} />
            {/* <Route path="/restaurant" element={<Restaurant />} /> */}
            {/* <Route path="/menu" element={<Menu />} /> */}
            {/* <Route path="/details" element={<Details />} /> */}
            <Route path="/cart" element={<Cart />} />
            <Route path="/checkout" element={<Checkout />} />
            {/* <Route path="/login" element={<SignupLogin />} /> */}
            <Route path="/thanks" element={<Thanks />} />
            <Route
              path="/menu"
              element={
                <>
                  <Menu />
                  <Featured featured={featured} />
                  <BreakfastPage breakfastPage={breakfastPage} />
                  <Salad salad={salad} />
                  <NigerianSoup nigerianSoup={nigerianSoup} />
                  <Signature signature={signature} />
                </>
              }
            />

            <Route />
          </Routes>
          <Footer />
          <ToastContainer
            position="top-right"
            autoClose={3000}
            hideProgressBar={false}
            newestOnTop={false}
            closeOnClick
            rtl={false}
            pauseOnFocusLoss
            draggable
            pauseOnHover
          />
        </Router>
      </MenuContextProvider>
    </AuthProvider>
  );
}

export default App;

// import React from 'react';

// function Card({ children }) {
//   return (
//     <div className="border border-purple-400 text-center rounded-lg shadow-xl pb-4 mx-auto w-full lg:w-[350px]">
//       {children}
//     </div>
//   );
// }

// export default Card;



  // const handleAddToCart = (item) => {
  //   addToCart(item._id, 1, item); //pass product ID, quantity, and product details also showing undefined 
  //   toast.success(`Added ${item.name} to cart`);
  //   console.log(item._id, 1, item); //added _ to the item._id it shows the id no, but when remove _ it shows undefined
  // };
  // const handleAddToCart = (item) => {
  //   if (!item || !item._id) {
  //     toast.error("Invalid item selected.");
  //     console.error("Invalid item passed to addToCart:", item);
  //     return;

     
  //   }
  //   addToCart(item._id, 1, item);
  //   toast.success(`Added ${item.name} to cart`);
  // };





// import React, { useState, useContext, useCallback } from "react";
// import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
// import "leaflet/dist/leaflet.css";
// import { Modal, Button } from "react-bootstrap";
// import "bootstrap/dist/css/bootstrap.min.css";
// import { MenuContext } from "../../context/MenuContext";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";

// // Utility function to format numbers into thousands (K) or millions (M)
// const formatPrice = (price) => {
//   if (price >= 1000000) {
//     return `${(price / 1000000).toFixed(1)}M`; // For millions
//   }
//   if (price >= 1000) {
//     return `${(price / 1000).toFixed(1)}K`; // For thousands
//   }
//   return price.toString(); // For values less than 1,000
// };

// // Component for displaying the map
// function SimpleMap({ location }) {
//   if (!location) return null;

//   return (
//     <MapContainer
//       center={[location.lat, location.lng]}
//       zoom={13}
//       style={{ height: "400px", width: "100%" }}
//     >
//       <TileLayer
//         url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//         attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
//       />
//       <Marker position={[location.lat, location.lng]}>
//         <Popup>{location.address}</Popup>
//       </Marker>
//     </MapContainer>
//   );
// }

// function Details({ restaurant, onClose }) {
//   const { addToCart, menuItems, breakItems, naijaItems, saladItems, signatureItems, url } = useContext(MenuContext);

//   const [selectedLocation, setSelectedLocation] = useState(null);
//   const [showMap, setShowMap] = useState(false);

//   const handleAddToCart = async (item) => {
//     if (!item || !item._id || !item.name || !item.price) {
//       toast.error("Item details are missing.");
//       return;
//     }

//     try {
//       await addToCart(item._id, 1, item);
//       toast.success(`Added ${item.name} to cart`);
//     } catch (error) {
//       console.error("Failed to add item to cart:", error);
//       toast.error("Failed to add item to cart");
//     }
//   };

//   const handleLocationClick = useCallback(async (address) => {
//     console.log("Clicked address:", address);
//     try {
//       const response = await fetch(
//         `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(
//           address
//         )}&limit=1`
//       );
//       const data = await response.json();
//       if (data.length > 0) {
//         const newLocation = {
//           lat: parseFloat(data[0].lat),
//           lng: parseFloat(data[0].lon),
//           address: address,
//         };
//         setSelectedLocation(newLocation);
//         setShowMap(true);
//       } else {
//         const fallbackLocation = {
//           lat: 0,
//           lng: 0,
//           address: "Location not found",
//         };
//         setSelectedLocation(fallbackLocation);
//         setShowMap(true);
//         toast.error("Couldn't find the exact location. Showing a default map.");
//       }
//     } catch (error) {
//       console.error("Error fetching location:", error);
//       toast.error("An error occurred while fetching the location. Please try again.");
//     }
//   }, []);

//   const { name, image, address, operating_days = [], operating_hours = [], menu = [] } = restaurant || {};

//   const menuItemsList = [
//     ...menuItems,
//     ...breakItems,
//     ...naijaItems,
//     ...saladItems,
//     ...signatureItems,
//   ];

//   return (
//     <div className="flex flex-col md:flex-row gap-4 p-4">
//       <div className="w-full md:w-1/2 bg-white p-6 rounded-lg shadow-md">
//         {restaurant ? (
//           <div>
//             <img
//               src={image}
//               alt={name}
//               className="w-full rounded-lg shadow-md mb-4"
//             />
//             <p className="font-bold text-2xl mb-2">{name}</p>
//             <h1 className="text-sm mb-2">
//               <b className="font-bold text-xl">Address: </b>
//               <span
//                 className="cursor-pointer text-blue-600 hover:underline"
//                 onClick={() => handleLocationClick(address)}
//               >
//                 {address}
//               </span>
//             </h1>
//           </div>
//         ) : (
//           <p>No restaurant information available.</p>
//         )}
//         <div>
//           <h3 className="text-lg font-bold mb-2">Days:</h3>
//           <ul>
//             {operating_days.length > 0 ? (
//               operating_days.map((day, index) => (
//                 <li key={index} className="text-sm mb-1">
//                   {day}
//                 </li>
//               ))
//             ) : (
//               <p className="text-sm">Operating days not available</p>
//             )}
//           </ul>
//         </div>
//         <div>
//           <h3 className="text-lg font-bold mb-2">Hours:</h3>
//           <ul>
//             {operating_hours.length > 0 ? (
//               operating_hours.map((hour, index) => (
//                 <li key={index} className="text-sm mb-1">
//                   {hour}
//                 </li>
//               ))
//             ) : (
//               <p className="text-sm">Hours not available</p>
//             )}
//           </ul>
//         </div>
//       </div>
//       <div className="w-full md:w-1/2 bg-white p-6 rounded-lg shadow-md relative">
//         <button
//           onClick={onClose}
//           className="absolute top-2 right-2 text-purple-400 text-2xl hover:text-purple-600 focus:outline-none"
//         >
//           &times;
//         </button>
//         <div style={{ maxHeight: "45vh", overflowY: "auto" }}>
//           <h1 className="text-xl font-bold mb-4">Food Menu:</h1>
//           <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
//             {menuItemsList.length > 0 ? (
//               menuItemsList.map((item) => (
//                 <div
//                   key={item._id}
//                   className="p-3 bg-gray-100 rounded-lg shadow-sm flex flex-col items-center"
//                 >
//                   <img
//                     src={`${url}/uploads/${item.img || "default-image.jpg"}`}
//                     alt={item.name}
//                     className="w-24 h-24 object-cover rounded-lg mb-2"
//                   />
//                   <p className="text-xs font-semibold text-center mb-1">{item.name}</p>
//                   <b className="text-xs mb-2">Price: ₦{formatPrice(item.price)}</b>
//                   <Button
//                     className="w-full text-xs bg-purple-500 text-white py-1"
//                     onClick={() => handleAddToCart(item)}
//                   >
//                     Add to Cart
//                   </Button>
//                 </div>
//               ))
//             ) : (
//               <p className="text-sm">Menu items not available</p>
//             )}
//           </div>
//         </div>
//         <Modal show={showMap} onHide={() => setShowMap(false)} size="lg">
//           <Modal.Header closeButton>
//             <Modal.Title>Restaurant Location</Modal.Title>
//           </Modal.Header>
//           <Modal.Body>
//             <SimpleMap location={selectedLocation} />
//           </Modal.Body>
//           <Modal.Footer>
//             <Button variant="secondary" onClick={() => setShowMap(false)}>
//               Close
//             </Button>
//           </Modal.Footer>
//         </Modal>
//       </div>
//     </div>
//   );
// }

// export default Details;



// import React, { useState, useContext } from "react";
// import Card from "../shared/Card";
// import Details from "./Details";
// import { MenuContext } from '../../context/MenuContext';
// import Container from "../shared/Container";

// function Restaurant() {
//   const { restaurantList } = useContext(MenuContext);
//   const [selectedRestaurant, setSelectedRestaurant] = useState(null);

//   const handlePictureClick = (restaurantName) => {
//     const foundRestaurant = restaurantList.find((item) => item.name === restaurantName);
//     setSelectedRestaurant(foundRestaurant);
//   };

//   const handleClose = () => {
//     setSelectedRestaurant(null);
//   };

//   return (
//     // <div className="">
//       <Container className="mt-8">
//       {/* <div className="my-[20px] mx-[30px]"> */}
//       {/* <div className="flex gap-2 justify-center items-center flex-wrap px-3 space-y-4"> */}
//       <div className="grid mb-5 grid.cols-1 md:grid-cols-3 gap-2 justify-center items-center flex-wrap px-3 space-y-4">
//         {restaurantList.map((item, index) => (
//           <Card key={index}>
//             <div className="w-full h-full" onClick={() => handlePictureClick(item.name)}>
//               <img
//                 src={item.image || 'fallback-image-url'} // Ensure 'fallback-image-url' is a valid path to an image
//                 alt={item.name}
//                 className="w-full h-[280px] rounded-lg shadow-md cursor-pointer"
//                 onError={(e) => e.target.src = 'fallback-image-url'} // Optional fallback
//               />
//               {/* <p className="font-bold">{item.name}</p>
//               <p>{item.address}</p> */}
//             </div>
//             <div className="p-2 md:p-3">
//               <p className="font-bold">{item.name}</p>
//               <p className="">{item.address}</p>
//             <button
//               onClick={() => handlePictureClick(item.name)}
//               className="bg-purple-400 text-white p-[10px] rounded mt-[10px]"
//             >
//               Select
//             </button>
//             </div>
//           </Card>
//         ))}
//       </div>
//       <div>
//         <marquee className="mb-4" behavior="" direction="">
//           <b>
//           Food Courier's Service Delivery........... let us quench your appetite with our delicious delicacies from top restaurants...
//           </b>
//         </marquee>
//       </div>
      
//       {selectedRestaurant && (
//         <div className=" fixed inset-0 flex items-center justify-center z-[30] bg-gray-900 bg-opacity-50">
//           <div className="relative bg-white p-6 rounded-lg shadow-lg">
//             <button
//               onClick={handleClose}
//               className="absolute top-2 right-2 text-purple-400 text-2xl hover:text-purple-600 focus:outline-none"
//             >
//               X 
//             </button>
//             <Details restaurant={selectedRestaurant} onClose={handleClose} />
//           </div>
//         </div>
//       )}
//     </Container>
//     // </div>
//   );
// }

// export default Restaurant;









// import React, { useContext } from 'react';
// import Card from './shared/Card';
// import { MenuContext } from '../context/MenuContext';
// import { toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';


// // // Utility function to format numbers into thousands (K) or millions (M)
// const formatPrice = (price) => {
//   if (price >= 1000000) {
//     return `${(price / 1000000).toFixed(1)}M`;  // For millions
//   }
//   if (price >= 1000) {
//     return `${(price / 1000).toFixed(1)}K`;  // For thousands
//   }
//   return price.toString();  // For values less than 1,000
// };

// function Featured() {
//   const { menuItems, addToCart } = useContext(MenuContext);
  
//   const handleAddToCart = (item) => {
//     addToCart(item._id, 1, item);
//     toast.success(`Added ${item.name} to cart`, {
//       position: "top-right",
//       autoClose: 3000,
//       hideProgressBar: false,
//       closeOnClick: true,
//       pauseOnHover: true,
//       draggable: true,
//     });
//   };
  
//   return (
//     <div className="my-5 mx-2 sm:mx-5 lg:mx-20">
//       <h1 className="mb-5 text-purple-500 font-bold text-2xl sm:text-3xl lg:text-4xl text-center">
//         Starters Meal
//       </h1>
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6">
//         {menuItems.map((item) => (
//           <Card key={item._id} className="relative">
//             <div className="block relative">
//               <img
//                 src={`https://food-project-api.onrender.com/uploads/${item.img}`}// Adjust URL as needed
//                 alt={item.name}
//                 className="w-[350px] h-[280px] sm:h-48 md:h-52 lg:h-56 object-cover transition duration-300 transform hover:scale-105 rounded-lg"
//               />
//               <div className="absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition duration-300">
//                 <p className="text-white text-base sm:text-lg font-bold">View Details</p>
//               </div>
//             </div>
//             <div className="p-2 sm:p-4">
//               <p className="font-bold text-base sm:text-lg">{item.name}</p>
//               <p className="text-gray-600 text-sm sm:text-base">{item.description}</p>
//               {/* <b className="text-gray-600 block text-sm sm:text-base">₦{item.price}</b> */}
//               <b className="text-gray-600 block text-sm sm:text-base">₦{formatPrice(item.price)}</b>
//               <button
//                 className="bg-purple-400 text-white p-2 rounded mt-2 w-full text-sm sm:text-base"
//                 onClick={() => handleAddToCart(item)}
          
//               >
//                 Add to Cart
//               </button>
//             </div>
//           </Card>
//         ))}
//       </div>
//     </div>
//   );
// }

// export default Featured;



// new
// import React, { useContext, useEffect } from 'react';
// import Card from './shared/Card';
// import { Link } from 'react-router-dom';
// import { MenuContext } from '../context/MenuContext';
// import { toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';


// // Utility function to format numbers into thousands (K) or millions (M)
// const formatPrice = (price) => {
//   if (price >= 1000000) {
//     return `${(price / 1000000).toFixed(1)}M`;  // For millions
//   }
//   if (price >= 1000) {
//     return `${(price / 1000).toFixed(1)}K`;  // For thousands
//   }
//   return price.toString();  // For values less than 1,000
// };

// function Featured() {
//   const { menuItems, addToCart } = useContext(MenuContext);

//   useEffect(() => {
//     console.log('Featured menuItems:', menuItems);
//   }, [menuItems]); // Log only when menuItems change

//   // const handleAddToCart = (item) => {
//   //   if (item?._id) {
//   //     addToCart(item);
//   //     toast.success(`Added ${item.name} to cart`);
//   //   } else {
//   //     console.error('Item does not have a valid _id');
//   //     toast.error('Item does not have a valid _id');
//   //   }
//   // };
  
//   const handleAddToCart = (item) => {
//     addToCart(item._id, 1, item); //pass product ID, quantity, and product details
//     toast.success(`Added ${item.name} to cart`);
//     console.log(item._id, 1, item);
//   };
  
//   return (
//     <div className="my-5 mx-2 sm:mx-5 lg:mx-20">
//       <h1 className="mb-5 text-purple-500 font-bold text-2xl sm:text-3xl lg:text-4xl text-center">
//         Starters Meal
//       </h1>
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6">
//         {menuItems.map((item) => (
//           <Card key={item._id} className="relative">
//             <Link to={`${item._id}`} className="block relative">
//               <img
//                 src={`https://food-project-api.onrender.com/uploads/${item.img}`} // Adjust URL as needed
//                 alt={item.name}
//                 className="w-[350px] h-[280px] sm:h-48 md:h-52 lg:h-56 object-cover transition duration-300 transform hover:scale-105 rounded-lg"
//               />
//               <div className="absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition duration-300">
//                 <p className="text-white text-base sm:text-lg font-bold">View Details</p>
//               </div>
//             </Link>
//             <div className="p-2 sm:p-4">
//               <p className="font-bold text-base sm:text-lg">{item.name}</p>
//               <p className="text-gray-600 text-sm sm:text-base">{item.description}</p>
//               {/* <b className="text-gray-600 block text-sm sm:text-base">₦{item.price}</b> */}
//               <b className="text-gray-600 block text-sm sm:text-base">₦{formatPrice(item.price)}</b>
//               <button
//                 className="bg-purple-400 text-white p-2 rounded mt-2 w-full text-sm sm:text-base"
//                 onClick={() => handleAddToCart(item)}
//               >
//                 Add to Cart
//               </button>
//             </div>
//           </Card>
//         ))}
//       </div>
//     </div>
//   );
// }

// export default Featured;

// import React, { useState, useContext, useEffect } from 'react';
// import { Link, useNavigate } from 'react-router-dom';
// import { RiMenu4Fill } from 'react-icons/ri';
// import { BsFillCartPlusFill } from 'react-icons/bs';
// import { MenuContext } from '../context/MenuContext';
// import abibiz1 from '../assets/abibiz1 logo.jpg';
// import avatar from '../assets/avatar.png'; // Fallback avatar
// import SignupLogin from '../components/pages/SignupLogin';
// import ProfileForm from '../components/pages/profileForm';
// import { MdOutlineCancel } from "react-icons/md";

// function Header() {
//   const { cartItems, url, userProfile, getUserProfile, loading } = useContext(MenuContext);
//   const navigate = useNavigate();

//   const [open, setOpen] = useState(false);
//   const [showSignupLogin, setShowSignupLogin] = useState(false);
//   const [showProfileForm, setShowProfileForm] = useState(false);
//   const [showLogoutMenu, setShowLogoutMenu] = useState(false);
//   const [userName, setUserName] = useState('User');
//   const [isLoggedIn, setIsLoggedIn] = useState(false);
//   const [bar, setBar] = useState(false)
  
//   // old to check todat 1st feb 2025
//   useEffect(() => {
//     const userData = localStorage.getItem('user');
//     const token = localStorage.getItem('auth-token');
    
//     if (userData) {
//       try {
//         const parsedData = JSON.parse(userData);
//         setUserName(parsedData.firstName || 'User');
//         setIsLoggedIn(!!token);
//         // localStorage.setItem('user', JSON.stringify(userData)); // where userData is the new user object
//       } catch (error) {
//         console.error('Failed to parse user data:', error);
//       }
//     } else {
//       setUserName('User');
//       setIsLoggedIn(false);
//     }
    
//     if (token) {
//       getUserProfile(); // Fetch profile
//     }
//   }, [getUserProfile, localStorage.getItem("user")]);


//   useEffect(() => {
//     if (userProfile) {
//       setUserName(userProfile.firstName || 'User');
//     }
//   }, [userProfile]);

//   const handleLogout = () => {
//     localStorage.removeItem('auth-token');
//     localStorage.removeItem('user');
//     setUserName('User');
//     setIsLoggedIn(false);
//     setShowLogoutMenu(false);
//     navigate('/'); // new
//     // navigate('/thanks'); old
//     window.location.reload();
//   };

//   return (
//     <header className="bg-gradient-to-r from-purple-500 to-purple-700 shadow-lg sticky top-0 z-20">
//       <div className="flex items-center justify-between p-4 lg:px-8">
//         <div className="flex items-center gap-4">
          
//           <Link to="">
//           <img className="w-24 sm:w-32 h-auto object-cover" src={abibiz1} alt="Logo" />
//           </Link>
//           <Link to="">
//           <h1 className="text-white text-xl sm:text-2xl lg:text-3xl font-bold">Food Courier's</h1></Link>
//         </div>

//         <div className='lg:hidden'>
//           {bar}

//         </div>
//         <nav className="hidden lg:flex items-center gap-6 text-white">
//           <Link to="/" className="text-lg font-medium hover:text-gray-200 transition-colors duration-300">Restaurant</Link>
//           <Link to="/menu" className="text-lg font-medium hover:text-gray-200 transition-colors duration-300">Menu</Link>
//           <Link to="/cart" className="text-lg font-medium hover:text-gray-200 transition-colors duration-300 relative">
//             <BsFillCartPlusFill className="text-2xl" />
//             <div className="absolute -top-2 -right-2 bg-red-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
//               {(cartItems?.menus?.reduce((total, item) => total + (Number(item.quantity) || 0), 0)) || 0}

//             </div>
//           </Link>
//           {isLoggedIn ? (
//             <div className="text-lg font-medium flex items-center gap-2 relative">
//               <img
//                 src={userProfile?.image ? `${url}/uploads/${userProfile.image}` : avatar}
//                 alt="Profile"
//                 className="h-12 w-12 rounded-full cursor-pointer border-2 border-white"
//                 onClick={() => setShowProfileForm(!showProfileForm)}
//               />
//               <p className="text-white ml-2 cursor-pointer">Hi {loading ? ('...'):(userName)}</p>
//               <div className="relative group">
//                 <p className='cursor-pointer px-4 py-2 text-white font-bold rounded' onClick={() => setShowLogoutMenu(!showLogoutMenu)}>logout</p>
//                 {showLogoutMenu && (
//                   <div className="absolute top-full right-0 bg-white shadow-lg rounded mt-2 p-2">
//                     <button
//                       className="w-full text-red-600 hover:bg-gray-100 rounded py-1 px-2"
//                       onClick={handleLogout}
//                     >
//                        Confirm Logout
//                     </button>
//                   </div>
//                 )}
//               </div>
//             </div>

// ) : (
//   <div className="relative group">
//     <p onClick={() => setShowSignupLogin(!showSignupLogin)} className='text-lg font-medium flex items-center gap-2 cursor-pointer px-4 py-2 text-white rounded'>
//       SignUp
//     </p>
//     <div className="absolute bottom-full mb-1 left-1/2 transform -translate-x-1/2 hidden group-hover:block bg-green-400 text-white text-xb py-2 px-3 rounded">
//       Login
//     </div>
//   </div>
// )}
//         </nav>
//         <button onClick={() => setOpen(!open)} className="lg:hidden text-white text-3xl">
         
//           <RiMenu4Fill />
//         </button>
//       </div>   
//     {/* Mobile Menu Dropdown */}
//     <div className={`fixed top-0 left-0 flex flex-col items-center w-4/5 sm:w-3/5 md:w-2/5 h-screen bg-white z-30 transform       transition-transform duration-200 ${open ? 'translate-x-0' : '-translate-x-full'}`}>
//       <nav className="flex flex-col items-center gap-6 mt-20">
//       <MdOutlineCancel onClick={() => setOpen(false)} className='absolute z-50 top-[40px] right-[40px] text-xl cursor-pointer hover:text-purple-500 transition-colors duration-300' />
//       <Link to="/" className="text-2xl font-medium hover:text-purple-500 transition-colors duration-300" onClick={() => setOpen(false)}>Restaurant</Link>
//       <Link to="/menu" className="text-2xl font-medium hover:text-purple-500 transition-colors duration-300" onClick={() => setOpen(false)}>Menu</Link>
//       <Link to="/cart" className="text-lg font-medium hover:text-gray-200 transition-colors duration-300 relative">
//         <BsFillCartPlusFill className="text-2xl" />
//         <div className="absolute -top-2 -right-2 bg-red-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
//           {(cartItems?.menus?.reduce((total, item) => total + (Number(item.quantity) || 0), 0)) || 0}

//         </div>
//       </Link>
//         {isLoggedIn ? (
//           <div className="text-2xl font-medium flex flex-col items-center gap-2 relative">
//             <img
//               src={userProfile?.image ? `${url}/uploads/${userProfile.image}` : avatar}
//               alt="Profile"
//               className="h-12 w-12 rounded-full"
//               onClick={() => setShowProfileForm(!showProfileForm)}
//             />
//             {/* <p>Hi, {userName}!</p> */}
//             <p>Hi {loading ? ('...'):(userName)}</p>
//             {/* {userName && <p>{userName}</p>}  // username appears regardless of profile image 14 december */}

//             <div className="relative">
//               <div onClick={() => setShowLogoutMenu(!showLogoutMenu)} className="cursor-pointer hover:text-purple-500 transition-colors duration-300">Logout</div>
//               {showLogoutMenu && (
//                 <div className="absolute top-full right-0 bg-white shadow-lg rounded mt-2 p-2">
//                   <button
//                     className="w-full text-red-600 hover:bg-gray-100 rounded py-2 px-3"
//                     onClick={handleLogout}
//                   >
//                     Confirm Logout
//                   </button>
//                 </div>
//               )}
//             </div>
//           </div>
//     ) : (
//       <div className="text-2xl font-medium cursor-pointer hover:text-purple-500 transition-colors duration-300" onClick={() => setShowSignupLogin(true)}>
//         SignUp / Login
//       </div>
//     )}
//   </nav>
// </div>
//       {/* Signup/Login Overlay */}
//       {showSignupLogin && (
//         <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
//           <SignupLogin onClose={() => setShowSignupLogin(false)} />
//         </div>
//       )}

//       {/* Profile Form Overlay */}
//       {showProfileForm && (
//         <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
//           <ProfileForm onClose={() => setShowProfileForm(false)} userProfile={userProfile} />
//         </div>
//       )}
//     </header>
//   );
// }

// export default Header;

// import React, { useContext } from "react";
// import Card from "./shared/Card";
// import { MenuContext } from "../context/MenuContext";
// import { toast } from "react-toastify";
// import 'react-toastify/dist/ReactToastify.css';


// // Utility function to format numbers into thousands (K) or millions (M)
// const formatPrice = (price) => {
//   if (price >= 1000000) {
//     return `${(price / 1000000).toFixed(1)}M`;  // For millions
//   }
//   if (price >= 1000) {
//     return `${(price / 1000).toFixed(1)}K`;  // For thousands
//   }
//   return price.toString();  // For values less than 1,000
// };

// function NigerianSoup() {
//   const { naijaItems, addToCart } = useContext(MenuContext);

//   const handleAddToCart = (item) => {
//     addToCart(item._id, 1, item); //pass product ID, quantity, and product details
//     toast.success(`Added ${item.name} to cart`);
//     console.log(item._id, 1, item);
//   };

//   return (
//     <div className="my-5 mx-2 sm:mx-5 lg:mx-20">
//       <h1 className="mb-5 text-purple-500 font-bold text-2xl sm:text-3xl lg:text-4xl text-center">
//         Nigerian Delicacies
//       </h1>
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6">
//         {naijaItems.map((item) => (
//           <Card key={item._id} className="relative">
//             <div className="block relative">
//               <img
//                 src={`https://food-project-api.onrender.com/uploads/${item.img}`} // Adjust URL as needed
//                 alt={item.name}
//                 className="w-[350px] h-[280px] sm:h-48 md:h-52 lg:h-56 object-cover transition duration-300 transform hover:scale-105 rounded-lg"
//               />
//               <div className="absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition duration-300">
//                 <p className="text-white text-base sm:text-lg font-bold">View Details</p>
//               </div>
//             </div>
//             <div className="p-2 sm:p-4">
//               <p className="font-bold text-base sm:text-lg">{item.name}</p>
//               <p className="text-gray-600 text-sm sm:text-base">{item.description}</p>
//               {/* <p className="text-gray-600 text-sm sm:text-base font-bold">₦{item.price}</p> */}
//               <b className="text-gray-600 block text-sm sm:text-base">₦{formatPrice(item.price)}</b>
//               <button
//                 className="bg-purple-400 text-white p-2 rounded mt-2 w-full text-sm sm:text-base"
//                 onClick={() => handleAddToCart(item)}
//               >
//                 Add to Cart
//               </button>
//             </div>
//           </Card>
//         ))}
//       </div>
//     </div>
//   );
// }

// export default NigerianSoup;

// import React, { useContext } from "react";
// import Card from "./shared/Card";
// import { Link } from "react-router-dom";
// import { MenuContext } from "../context/MenuContext";
// import { toast } from "react-toastify";
// import 'react-toastify/dist/ReactToastify.css';


// // Utility function to format numbers into thousands (K) or millions (M)
// const formatPrice = (price) => {
//   if (price >= 1000000) {
//     return `${(price / 1000000).toFixed(1)}M`;  // For millions
//   }
//   if (price >= 1000) {
//     return `${(price / 1000).toFixed(1)}K`;  // For thousands
//   }
//   return price.toString();  // For values less than 1,000
// };

// function Signature() {
//   const { signatureItems, addToCart } = useContext(MenuContext);

//   const handleAddToCart = (item) => {
//     addToCart(item._id, 1, item); //pass product ID, quantity, and product details also showing undefined 
//     toast.success(`Added ${item.name} to cart`);
//     console.log(item._id, 1, item); //added _ to the item._id it shows the id no, but when remove _ it shows undefined
//   };

//   return (
//     <div className="my-5 mx-2 sm:mx-5 lg:mx-20">
//       <h1 className="mb-5 text-purple-500 font-bold text-2xl sm:text-3xl lg:text-4xl text-center">
//         Signature Dishes
//       </h1>
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6">
//         {signatureItems.map((item) => (
//           <Card key={item._id}>
//             <div to={`/details/${item._id}`} className="block relative">
//               <img
//               //  src={item.img ? `http://food-project-api.onrender.com/uploads/${item.product.img}` : "default_image_url"}
//                 src={`https://food-project-api.onrender.com/uploads/${item.img}`} // Adjust URL as needed
//                 alt={item.name}
//                 className="w-[350px] h-[280px] sm:h-48 md:h-52 lg:h-56 object-cover transition duration-300 transform hover:scale-105 rounded-lg"
//               />
//               <div className="absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition duration-300">
//                 <p className="text-white text-base sm:text-lg font-bold">View Details</p>
//               </div>
//             </div>
//             <div className="p-2 sm:p-4">
//               <p className="font-bold text-base sm:text-lg">{item.name}</p>
//               <p className="text-gray-600 text-sm sm:text-base">{item.description}</p>
//               {/* <p className="text-gray-600 text-sm sm:text-base font-bold">₦{item.price}</p> */}
//               <b className="text-gray-600 block text-sm sm:text-base">₦{formatPrice(item.price)}</b>
//               <button
//                 className="bg-purple-400 text-white p-2 rounded mt-2 w-full text-sm sm:text-base"
//                 onClick={() => handleAddToCart(item)}
//               >
//                 Add to Cart
//               </button>
//             </div>
//           </Card>
//         ))}
//       </div>
//     </div>
//   );
// }

// export default Signature;
